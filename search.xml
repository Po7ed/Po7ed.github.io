<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>长行级分享</title>
    <url>/2025-6-30/</url>
    <content><![CDATA[各位领导老师、星瀚级和长行级的学弟、学妹们：
下午好！
我是 2025 届弘毅级 9 班张敬东。

比起身边的两位巨佬，我今天的分享必定相形见绌，现在我如坐针毡，不知道教室里的你此刻是什么样的心情？也是坐立不安？因为期末考不够理想而失落，惆怅？想想还要奋斗一年而感到痛苦吗？是的，学习的确很辛苦。
那么，我们为什么要辛苦学习呢？让自己快乐一点，不好吗？现实是，文化课学习如果不够好，很多自己想做的事便无法实现。在当前的社会背景下，文化课是绝大多数同学的唯一出路。更直白一些，只有学好文化课，才有自由地做自己想做的事的资本。
既然文化课的学习无法避免，不妨顺其自然。
此时，你可能会说，我还是更喜欢玩游戏、刷短视频。它们让我快乐！它们的诱惑太大了！我感同深受。在平时的竞赛学习中，我时不时就会溜到 b 站去，不知不觉时间也溜走了。我也经常和父母发生争执，因为我游戏玩得不够尽兴。它们的正反馈的确极其快，游戏战绩如何一目了然，短视频快乐源源不断。相比之下，学习在让人快乐这件事上的表现就太糟糕了！它的正反馈慢到足够让你不想学。你努力了好几个月，最终却不见明显的进步。
前几天我的同学们填报中招志愿，有的同学因为中考估分不高，只能选择天价学费的私立高中，而有的同学则拥有自由选择顶级学府的绝对高分。如果你有幸考入一中、附中、三中等等这样的好高中，你将拥有优秀的同学、顶级的师资、三层豪华大食堂，想吃麻辣烫？有！牛排？有！汉堡，寿司，牛肉面，应有尽有！而且还不贵。总之，不论学习、生活，性价比极高，你值得拥有！我相信对于绝大多数同学，进入一三附这样的顶级高中一定是你们的最高理想。但是有的同学可能会说，这样的理想离我太遥远了，我认为我做不到，怎么办呢？
怎么办呢？我的解决方案是：适当缩减目标，将目标切细。
还记得七年级上册的课文《走一步，再走一步》吗？请允许我朗读其中一段：

“不要想着有多远，有多困难，你需要想的是迈一小步。这个你能做到。看着手电光指的地方。看到那块石头没有?”光柱游走，指着岩脊下面的一块突出的石头。“看到了吗?”他大声问道。
我慢慢地挪动了一下。“看到了。”我回答。
“好的，现在转过身去，然后用左脚踩住那块石头。这就是你要做的。它就在你下面一点儿。你能做到。不要担心接下来的事情，也不要往下看，先走好第一步。相信我。”

这是小主人公在爸爸的引导下一步步爬下悬崖的片段。
同学们，我们努力前进的过程，必然是艰难而曲折，看看身边那些高举着火炬帮我们指路的老师们吧，十六中的老师们个个敬业专业，我们只要紧跟着老师们的指引，给自己定下一些小目标，坚实地走好脚下的每一步，就必定能一点一点地进步，一点一点地向你既定的目标走去，并最终实现它。当然，对绝大多数同学而言，不要一开始就立志“我要冲进年段前 20，我要考一中”，结果天天被吊在 100 名开外打，然后很容易就自卑了，放弃了。不同状态的同学可以定不同的目标，来定义专属自己的进步。
每当获得一点点小小的进步时，你可以及时地给自己正反馈，恰如游戏所给的那样，也可以主动从朋友、老师、家长那里获取正向鼓励。一份甜品、一个礼物、一句肯定的话，等等，让你感到“我的努力付出”有回报。
课堂是学习进步的主战场，课堂上一定要努力全程和老师互动。比如，老师提问的时候，就算心里没底，也要勇敢发言，万一蒙对了，成就感爆棚；要是答错了，也没关系，就当给大家表演个 “反面教材”，调节下课堂气氛。总之一定要紧跟老师的课堂。
最后，心态调整也很重要。我们要学着做自己的 “心灵导师”。
有时考砸了，可能会感觉天都要塌下来了。我也经历过：有一场很重要的比赛，我发挥失常，以至于都怀疑自己是否适合继续走竞赛这条路了。但我不想这么早就放弃，一次失利不代表什么，只要听从内心的声音，努力尝试，总会走到自己想要去的地方。我喜欢在日记本上写下自己对学习的看法，调整心态，重拾信心。
另外，千万别和别人盲目攀比成绩。每个人的学习节奏不一样，有的人就像 “短跑选手”，平时成绩很好，但大型考试可能发挥失常；有的人是 “长跑选手”，厚积薄发，越到最后越厉害。你要做的就是找到自己的节奏，每天进步一点点，就是胜利！
在这里，要特别感谢三年来所有教过、没教过我的老师们，因为你们的无私付出，我们才有了健康成长的土壤！谢谢您！您辛苦了！
最后感谢各位同学的耐心聆听。
]]></content>
  </entry>
  <entry>
    <title>创班自招面试自我介绍</title>
    <url>/ahsfnu-rd-self-intro/</url>
    <content><![CDATA[
  40fff3a5cf27b77ac08956115c07132948247ffaab5d8e84347027a8feaf07344c79d75248c533d82da67f06b18b733284c41012181d50d4ad3df0f74ef90f2f7ec1bd7554ac1ed26fb5834dafc21d003ce52d0cee589eae3f80e499ae5a769b8add7e9dee2099268717a15683ae1fc2715d5209f816f591a501b0d6097681f0116913f10d1df3df0db4cbca46f4fbd3c46485ba31490209546d63333ceb786ace21ad8b8700ca82b0734c58d3c15e5cb3caf0b58d54640993a952ca29099c108f7708b4a29ba732c54654b2338650968871127db23a0047ca6669ea7b9921b933e40d3bfeae8f00cc56d21981ce0aff21f4243a86fe70da173ae20e16405316f957b67e0cb3f524bd05712f5765d5793e90b042f1d1db873ff729692e87e97d965f26d568ca047f871a75a3ce60cb9db2545e8343f368ec2e7ac0fa6513d33fefd9398506a030acdfe0c89cefd8b9eef3f8eab8028577483fbdb4954eb57354c6b210cc849b28f7abc8e9facaae355e6547954088a60ddfc424fb744366312848b1aa0427fa0bd39fdb0c62811192b22209cd6052e51c8ef147a722b3d5a5b0f8f991ae685057514286a534546b8ca40bd30dfe59ced95612dadca89fb6a072557ead7b22b97028b6196ba8a18a94f577ea0015f11153b92abafb1f5bb75786695ad3a58bcfe7636700ba3fb2b562a857fc63ac6ef0e0c51813c4e043b793895c82e2dd41fd889b1bf9771903b0cab3953131326d223da2b7b98fe063a60f3cfb0436bd38705ad2718c4e262a8793c5e6f20784023e0e06cb542ee3887b8fe31cbfd925ae04a9bf5298a462339ef2f14cdff2fe4286a599cad0bd87b465ca57245205d7915d3e0a2f85c220fc46730793507116238f9ce3005573cd936ac1ea7881a48f7051a1e3857b5fa0a39be3b0ed09ed13a85e10039ad6377c5fad045276948e56b71869563273c434216bb04f3a430b64e635f23c81d2033406ffbbbbed2b1ca91988ebb3c3cf1f903682b7d6b9322828707eab14f66a1b5c42dcd4f888866031a93870da310bd763f402845e7fb15d634e1d0d229deb6ec6674cfe0a677d94d92e07df26e807528b9a68f285d1ccebdbaaf1b98e40c17a283fb2a7e45a53f0dfec00000d65d5efb924d13ea66a9d4f85c3c497946161cc4d61729916e8bbad7e4740fb2ebc455970befe29d837b7f716015eec5bd1ffb961be0e28e13ffb76fe8ee5707ecbd9dd11417705ed5841ef0d175abafc249419c0736b5daad06a476e7c0083276f9b8dfc12f2f192b611f755319465381aad27db6ffa8633d6e1135c4c737d67edb5739274b3818747c3acec560af6f07e1ac2afc6902cff484e46bc2f0afc4a605cc7ec505dfd84573ba6ab7059ad3d211f3eb7ec3ed011c649884b062e4d70a843157831f35561ffcc809787a050eb658a0e61e7eb970d2faebc6a1ffe2edf16af966b16a0442e3c00e3ea9060bea080ef53b17a5184adb0814ca7042591e1920f89c2d8ee4e4c0137793173bde1a2de54314de8cec18e824576e5c6470173f4ed45b36ad36d0d5a3ede23b2dbd12a0e2fa2ea3fb66774e3b342897fb7bee78b3c5b73edda915eb79389db920083af901cc547f079c0be80c007203a1ac70838acd091d682c0eb331f71149fc5d78099beed4bcbbb88339ff04a89ad291a6a3403a426cd836b7fbe1f9a5a950500d3c32903d8bd8376bc315b207077540ee6ea85ca728ffbbbeff76c4e10a587e7b581232ae5d5c8b17f6ea15871072e5a4fd8ad7f2f28cdcfb3ecf7a30cc2f8e35433de54a6602c404a311f2a89d94925a372822ed565da34af04425c9cd2e568593b3822f28a10c0b8e7730188146d261c747e25ca960bcff6
  
    
      
      
        Hey, password is required here.
      
    
  

]]></content>
      <tags>
        <tag>Summary</tag>
      </tags>
  </entry>
  <entry>
    <title>组合数学</title>
    <url>/combinatorics/</url>
    <content><![CDATA[设 0!=00=10!=0^0=10!=00=1。
施工中。有部分空缺。

加法 &amp; 乘法原理
加法原理
完成一个任务有 nnn 类办法，第 iii 类办法有 aia_iai​ 个方法，则完成该任务共有 ∑i=1nai\sum_{i=1}^{n}a_i∑i=1n​ai​ 种不同的方法。
乘法原理
完成一个任务有 nnn 个步骤，第 iii 个步骤有 aia_iai​ 个方法，则完成该任务共有 ∏i=1nai\prod_{i=1}^{n}a_i∏i=1n​ai​ 种不同的方法。
排列 &amp; 组合数
排列数
从 nnn 个互不相同的元素中取出 mmm（m≤nm\le nm≤n，m,n∈Nm,n\in\Bbb{N}m,n∈N）个并按照一定的顺序排列，所得到的排列称为 nnn 中取 mmm 的一个排列。设完成这个任务的方案数（也是所得排列的个数）为 Anm\mathrm{A}_n^mAnm​，有计算 Anm\mathrm{A}_n^mAnm​ 的公式
Anm=n×(n−1)×⋯×(n−(m−1))=∏i=1m(n−(i−1))=n!(n−m)!(1)\mathrm{A}_n^m=n\times (n-1)\times\cdots\times (n-(m-1))=\prod_{i=1}^{m}(n-(i-1))=\cfrac{n!}{(n-m)!}\tag{1}
Anm​=n×(n−1)×⋯×(n−(m−1))=i=1∏m​(n−(i−1))=(n−m)!n!​(1)
(1)(1)(1) 可以用乘法原理解释。上述任务共分 mmm 步，其中第 iii 步执行“从剩余 (n−(i−1))(n-(i-1))(n−(i−1)) 个元素中取出 111 个”，显然第 iii 步有 (n−i+1)(n-i+1)(n−i+1) 个方案，于是累乘。
组合数
从 nnn 个互不相同的元素中取出 mmm（m≤nm\le nm≤n，m,n∈Nm,n\in\Bbb{N}m,n∈N）个组成集合，所得到的集合称为 nnn 中取 mmm 的一个组合，设所得的组合个数（重复的不计）为 Cnm=(nm)\mathrm{C}_n^m=\dbinom{n}{m}Cnm​=(mn​)。
显然的，对于每个组合 CCC，都可以得出 m!m!m! 个以 CCC 内元素组成的排列。（只需将 CCC 内 mmm 个元素全排列即可。）于是，
m!(nm)=Anmm!\dbinom{n}{m}=\mathrm{A}_n^m
m!(mn​)=Anm​
于是有计算 (nm)\dbinom{n}{m}(mn​) 的公式
(nm)=Anmm!=n!(n−m)!m!(2)\dbinom{n}{m}=\cfrac{\mathrm{A}_n^m}{m!}=\cfrac{n!}{(n-m)!m!}\tag{2}
(mn​)=m!Anm​​=(n−m)!m!n!​(2)
在 OI 中，由于 m&gt;nm&gt;nm&gt;n 的情况对于定义无意义，故设此时 Anm=(nm)=0\mathrm{A}_n^m=\dbinom{n}{m}=0Anm​=(mn​)=0，代表无方案。（一般地，无意义的情况组合、排列数均默认为 000。）
圆排列
多重组合数
杨辉三角
容易通过下面将要介绍的 (3)(3)(3) 式得到杨辉三角   ⟺  \iff⟺ 组合数。
这里给出一个表格
The table of (nm)n\m0123456789011112121313314146415151010516161520156171721353521718182856705628819193684126126843691\text{The table of }\dbinom{n}{m}\\
\begin{array}{|r|c|c|c|c|c|c|c|c|c|c|}\hline
	n\backslash m&amp;\boldsymbol{0}&amp;\boldsymbol{1}&amp;\boldsymbol{2}&amp;\boldsymbol{3}&amp;\boldsymbol{4}&amp;\boldsymbol{5}&amp;\boldsymbol{6}&amp;\boldsymbol{7}&amp;\boldsymbol{8}&amp;\boldsymbol{9}\\\hline
	\boldsymbol{0}&amp;1\\\hline
	\boldsymbol{1}&amp;1&amp;1\\\hline
	\boldsymbol{2}&amp;1&amp;2&amp;1\\\hline
	\boldsymbol{3}&amp;1&amp;3&amp;3&amp;1\\\hline
	\boldsymbol{4}&amp;1&amp;4&amp;6&amp;4&amp;1\\\hline
	\boldsymbol{5}&amp;1&amp;5&amp;10&amp;10&amp;5&amp;1\\\hline
	\boldsymbol{6}&amp;1&amp;6&amp;15&amp;20&amp;15&amp;6&amp;1\\\hline
	\boldsymbol{7}&amp;1&amp;7&amp;21&amp;35&amp;35&amp;21&amp;7&amp;1\\\hline
	\boldsymbol{8}&amp;1&amp;8&amp;28&amp;56&amp;70&amp;56&amp;28&amp;8&amp;1\\\hline
	\boldsymbol{9}&amp;1&amp;9&amp;36&amp;84&amp;126&amp;126&amp;84&amp;36&amp;9&amp;1\\\hline
\end{array}
The table of (mn​)n\m0123456789​01111111111​1123456789​21361015212836​3141020355684​415153570126​5162156126​6172884​71836​819​91​​
将组合数操作转化到为杨辉三角上研究是一个常用方法。下面的性质也可以结合杨辉三角理解（下面的部分可能偏形式化）。
组合数常见性质（公式）
对称公式
(nk)=(nn−k)(3)\dbinom{n}{k}=\dbinom{n}{n-k}\tag{3}
(kn​)=(n−kn​)(3)
即对换取与不取（C⇆∁{1,⋯ ,n}CC\leftrightarrows \complement_{\{1,\cdots,n\}} CC⇆∁{1,⋯,n}​C）。
加法公式（递推式）
(nk)=(n−1k)+(n−1k−1)(4)\dbinom{n}{k}=\dbinom{n-1}{k}+\dbinom{n-1}{k-1}\tag{4}
(kn​)=(kn−1​)+(k−1n−1​)(4)
可视为最后一个元素取与不取之和。不取则从 n−1n-1n−1 中选 kkk，取则从 n−1n-1n−1 中选 k−1k-1k−1。
吸收公式
(nk)=nk(n−1k−1)(5)\dbinom{n}{k}=\cfrac{n}{k}\dbinom{n-1}{k-1}\tag{5}
(kn​)=kn​(k−1n−1​)(5)
由通项公式 (2)(2)(2) 可得：
(nk)=n!(n−k)!k!=n×(n−1)!k×(n−k)!(k−1)!=nk(n−1k−1)\dbinom{n}{k}=\cfrac{n!}{(n-k)!k!}=\cfrac{n\times(n-1)!}{k\times(n-k)!(k-1)!}=\cfrac{n}{k}\dbinom{n-1}{k-1}
(kn​)=(n−k)!k!n!​=k×(n−k)!(k−1)!n×(n−1)!​=kn​(k−1n−1​)
二次选择
(nm)(mk)=(nk)(n−km−k)(6)\dbinom{n}{m}\dbinom{m}{k}=\dbinom{n}{k}\dbinom{n-k}{m-k}\tag{6}
(mn​)(km​)=(kn​)(m−kn−k​)(6)
设 ∣A∣=n,∣B∣=m,∣C∣=k,C⊆B⊆A|A|=n,|B|=m,|C|=k,C\subseteq B\subseteq A∣A∣=n,∣B∣=m,∣C∣=k,C⊆B⊆A，则
从 AAA 中选出 BBB，再从 BBB 中选出 CCC 的方案数 等于 先从 AAA 中选出 CCC，然后从 ∁AC\complement_A C∁A​C 中选出 B′B&#x27;B′，则 B=B′∪CB=B&#x27;\cup CB=B′∪C 的方案数。
换个角度，使用定义，
(nm)(mk)=n!(n−m)!m!×m!(m−k)!k!=n!(n−m)!×1(m−k)!k!=n!k!×1(m−k)!(n−m)!=n!(n−k)!k!×(n−k)!(m−k)!(n−m)!=(nk)(n−km−k)\begin{aligned}
	\dbinom{n}{m}\dbinom{m}{k}&amp;=\cfrac{n!}{(n-m)!m!}\times\cfrac{m!}{(m-k)!k!}\\
	&amp;=\cfrac{n!}{(n-m)!}\times\cfrac{1}{(m-k)!k!}\\
	&amp;=\cfrac{n!}{k!}\times\cfrac{1}{(m-k)!(n-m)!}\\
	&amp;=\cfrac{n!}{(n-k)!k!}\times\cfrac{(n-k)!}{(m-k)!(n-m)!}\\
	&amp;=\dbinom{n}{k}\dbinom{n-k}{m-k}
\end{aligned}
(mn​)(km​)​=(n−m)!m!n!​×(m−k)!k!m!​=(n−m)!n!​×(m−k)!k!1​=k!n!​×(m−k)!(n−m)!1​=(n−k)!k!n!​×(m−k)!(n−m)!(n−k)!​=(kn​)(m−kn−k​)​
行求和
∑i=0n(ni)=2n(7)\sum_{i=0}^{n}\dbinom{n}{i}=2^n\tag{7}
i=0∑n​(in​)=2n(7)
即所有选择的方案数等于所有长度为 iii 的方案数之和（0≤i≤n0\le i\le n0≤i≤n）。
换个角度，由 (4)(4)(4) 得
∑i=0n(ni)=∑i=0n[(n−1i−1)+(n−1i)]=∑i=−1n−1(n−1i)+∑i=0n(n−1i)=2∑i=0n−1(n−1i)\sum_{i=0}^{n}\dbinom{n}{i}=\sum_{i=0}^{n}\left[\dbinom{n-1}{i-1}+\dbinom{n-1}{i}\right]=\sum_{i=-1}^{n-1}\dbinom{n-1}{i}+\sum_{i=0}^{n}\dbinom{n-1}{i}=2\sum_{i=0}^{n-1}\dbinom{n-1}{i}
i=0∑n​(in​)=i=0∑n​[(i−1n−1​)+(in−1​)]=i=−1∑n−1​(in−1​)+i=0∑n​(in−1​)=2i=0∑n−1​(in−1​)
即行求和等于上一行求和的两倍。n=0n=0n=0 时，
∑i=0n(ni)=(00)=1=20=2n\sum_{i=0}^{n}\dbinom{n}{i}=\dbinom{0}{0}=1=2^0=2^n
i=0∑n​(in​)=(00​)=1=20=2n
故运用数学归纳法可得式 (7)(7)(7)。
其实 (7)(7)(7) 式可由二项式定理代入 a=1,b=1a=1,b=1a=1,b=1 得到。下文会介绍。
带符号行求和
∑i=0n(−1)i(ni)=[n=0](8)\sum_{i=0}^{n}(-1)^i\dbinom{n}{i}=[n=0]\tag{8}
i=0∑n​(−1)i(in​)=[n=0](8)
同样由 (4)(4)(4) 得（n≠0n\ne 0n​=0 时）
∑i=0n(−1)i(ni)=∑i=0n(−1)i[(n−1i−1)+(n−1i)]=(n−1−1)+(n−1n)=0\sum_{i=0}^{n}(-1)^i\dbinom{n}{i}=\sum_{i=0}^{n}(-1)^i\left[\dbinom{n-1}{i-1}+\dbinom{n-1}{i}\right]=\dbinom{n-1}{-1}+\dbinom{n-1}{n}=0
i=0∑n​(−1)i(in​)=i=0∑n​(−1)i[(i−1n−1​)+(in−1​)]=(−1n−1​)+(nn−1​)=0
上面的推导运用了类似裂项的技巧，前后两项可以消去，只剩头尾。当 n=0n=0n=0 时，
∑i=0n(−1)i(ni)=(−1)0×(00)=1\sum_{i=0}^{n}(-1)^i\dbinom{n}{i}=(-1)^0\times\dbinom{0}{0}=1
i=0∑n​(−1)i(in​)=(−1)0×(00​)=1
综上可得 (8)(8)(8)。同样，其可由二项式定理代入 a=1,b=−1a=1,b=-1a=1,b=−1 得到。
带权行求和
∑i=0ni(ni)=n2n−1(9)\sum_{i=0}^{n}i\dbinom{n}{i}=n2^{n-1}\tag{9}
i=0∑n​i(in​)=n2n−1(9)
∑i=0ni2(ni)=n(n+1)2n−1(10)\sum_{i=0}^{n}i^2\dbinom{n}{i}=n(n+1)2^{n-1}\tag{10}
i=0∑n​i2(in​)=n(n+1)2n−1(10)
列求和
∑i=kn(ik)=(n+1k+1)(11)\sum_{i=k}^{n}\dbinom{i}{k}=\dbinom{n+1}{k+1}\tag{11}
i=k∑n​(ki​)=(k+1n+1​)(11)
考虑 (kk)=(k+1k+1)=1\dbinom{k}{k}=\dbinom{k+1}{k+1}=1(kk​)=(k+1k+1​)=1，
∑i=kn(ik)=(kk)+∑i=k+1n(ik)=(k+1k+1)+∑i=k+1n(ik)=(k+1k+1)+(k+1k)+∑i=k+2n(ik)=(k+2k+1)+∑i=k+2n(ik)⋮=(k+j−1k+1)+∑i=k+j−1n(ik)=(k+j−1k+1)+(k+j−1k)+∑i=k+jn(ik)=(k+jk+1)+∑i=k+jn(ik)⋮=(k+(n−k+1)k+1)+∑i=k+(n−k+1)n(ik)=(n+1k+1)\begin{aligned}
	\sum_{i=k}^{n}\dbinom{i}{k}&amp;=\dbinom{k}{k}+\sum_{i=k+1}^{n}\dbinom{i}{k}\\
	&amp;=\dbinom{k+1}{k+1}+\sum_{i=k+1}^{n}\dbinom{i}{k}\\
	&amp;=\dbinom{k+1}{k+1}+\dbinom{k+1}{k}+\sum_{i=k+2}^{n}\dbinom{i}{k}\\
	&amp;=\dbinom{k+2}{k+1}+\sum_{i=k+2}^{n}\dbinom{i}{k}\\
	&amp;\quad\vdots\\
	&amp;=\dbinom{k+j-1}{k+1}+\sum_{i=k+j-1}^{n}\dbinom{i}{k}\\
	&amp;=\dbinom{k+j-1}{k+1}+\dbinom{k+j-1}{k}+\sum_{i=k+j}^{n}\dbinom{i}{k}\\
	&amp;=\dbinom{k+j}{k+1}+\sum_{i=k+j}^{n}\dbinom{i}{k}\\
	&amp;\quad\vdots\\
	&amp;=\dbinom{k+(n-k+1)}{k+1}+\sum_{\mathclap{i=k+(n-k+1)}}^{n}\dbinom{i}{k}\\
	&amp;=\dbinom{n+1}{k+1}
\end{aligned}
i=k∑n​(ki​)​=(kk​)+i=k+1∑n​(ki​)=(k+1k+1​)+i=k+1∑n​(ki​)=(k+1k+1​)+(kk+1​)+i=k+2∑n​(ki​)=(k+1k+2​)+i=k+2∑n​(ki​)⋮=(k+1k+j−1​)+i=k+j−1∑n​(ki​)=(k+1k+j−1​)+(kk+j−1​)+i=k+j∑n​(ki​)=(k+1k+j​)+i=k+j∑n​(ki​)⋮=(k+1k+(n−k+1)​)+i=k+(n−k+1)​∑n​(ki​)=(k+1n+1​)​
很吓人？其实就是一行行地向下迭代。
主对角线（方向）求和
∑i=0k(n+ii)=(n+k+1k)(12)\sum_{i=0}^{k}\dbinom{n+i}{i}=\dbinom{n+k+1}{k}\tag{12}
i=0∑k​(in+i​)=(kn+k+1​)(12)
考虑 (n0)=(n+10)=1\dbinom{n}{0}=\dbinom{n+1}{0}=1(0n​)=(0n+1​)=1，
∑i=0k(n+ii)=(n0)+∑i=1k(n+ii)=(n+10)+∑i=1k(n+ii)=(n+10)+(n+11)+∑i=2k(n+ii)=(n+21)+∑i=2k(n+ii)⋮=(n+jj−1)+∑i=jk(n+ii)⋮=(n+(k+1)(k+1)−1)+∑i=k+1k(n+ii)=(n+k+1k)\begin{aligned}
	\sum_{i=0}^{k}\dbinom{n+i}{i}&amp;=\dbinom{n}{0}+\sum_{i=1}^{k}\dbinom{n+i}{i}\\
	&amp;=\dbinom{n+1}{0}+\sum_{i=1}^{k}\dbinom{n+i}{i}\\
	&amp;=\dbinom{n+1}{0}+\dbinom{n+1}{1}+\sum_{i=2}^{k}\dbinom{n+i}{i}\\
	&amp;=\dbinom{n+2}{1}+\sum_{i=2}^{k}\dbinom{n+i}{i}\\
	&amp;\quad\vdots\\
	&amp;=\dbinom{n+j}{j-1}+\sum_{i=j}^{k}\dbinom{n+i}{i}\\
	&amp;\quad\vdots\\
	&amp;=\dbinom{n+(k+1)}{(k+1)-1}+\sum_{i=k+1}^{k}\dbinom{n+i}{i}\\
	&amp;=\dbinom{n+k+1}{k}
\end{aligned}
i=0∑k​(in+i​)​=(0n​)+i=1∑k​(in+i​)=(0n+1​)+i=1∑k​(in+i​)=(0n+1​)+(1n+1​)+i=2∑k​(in+i​)=(1n+2​)+i=2∑k​(in+i​)⋮=(j−1n+j​)+i=j∑k​(in+i​)⋮=((k+1)−1n+(k+1)​)+i=k+1∑k​(in+i​)=(kn+k+1​)​
辅对角线（方向）求和
∑i=0⌊n2⌋(n−ii)=Fn+1(13)\sum_{i=0}^{\left\lfloor\frac{n}{2}\right\rfloor}\dbinom{n-i}{i}=F_{n+1}\tag{13}
i=0∑⌊2n​⌋​(in−i​)=Fn+1​(13)
其实累加上界并不重要，即上界是比较松的，因为 i&gt;⌊n2⌋i&gt;\left\lfloor\dfrac{n}{2}\right\rfloori&gt;⌊2n​⌋ 时 n−i&lt;in-i&lt;in−i&lt;i，无意义。这里可以放大，视为 nnn，
∑i=0n(n−ii)=∑i=0n[(n−i−1i)+(n−i−1i−1)]=∑i=0n(n−i−1i)+∑i=0n(n−i−1i−1)=∑i=0n((n−1)−ii)+∑i=0n((n−2)−(i−1)i−1)=∑i=0n−1((n−1)−ii)+∑i=0n−2((n−2)−ii)\begin{aligned}
	\sum_{i=0}^{n}\dbinom{n-i}{i}&amp;=\sum_{i=0}^{n}\left[\dbinom{n-i-1}{i}+\dbinom{n-i-1}{i-1}\right]\\
	&amp;=\sum_{i=0}^{n}\dbinom{n-i-1}{i}+\sum_{i=0}^{n}\dbinom{n-i-1}{i-1}\\
	&amp;=\sum_{i=0}^{n}\dbinom{(n-1)-i}{i}+\sum_{i=0}^{n}\dbinom{(n-2)-(i-1)}{i-1}\\
	&amp;=\sum_{i=0}^{n-1}\dbinom{(n-1)-i}{i}+\sum_{i=0}^{n-2}\dbinom{(n-2)-i}{i}\\
\end{aligned}
i=0∑n​(in−i​)​=i=0∑n​[(in−i−1​)+(i−1n−i−1​)]=i=0∑n​(in−i−1​)+i=0∑n​(i−1n−i−1​)=i=0∑n​(i(n−1)−i​)+i=0∑n​(i−1(n−2)−(i−1)​)=i=0∑n−1​(i(n−1)−i​)+i=0∑n−2​(i(n−2)−i​)​
注意到上式满足斐波那契数列的递推式，同时 n=0n=0n=0 时式 (11)(11)(11) 等于 111，n=1n=1n=1 时式 (13)(13)(13) 也等于 111，故式 (13)(13)(13) 得证（数学归纳法）。
范德蒙德卷积
∑i=0k(ni)(mk−i)=(n+mk)(14)\sum_{i=0}^k\binom{n}{i}\binom{m}{k-i}=\binom{n+m}{k}\tag{14}
i=0∑k​(in​)(k−im​)=(kn+m​)(14)
证明使用二项式定理（设 l=i+jl=i+jl=i+j）
∑k=0n+m(n+mk)xk=(x+1)n+m=(x+1)n(x+1)m=[∑i=0n(ni)xi][∑j=0m(mj)xj]=∑i=0n∑j=0m(ni)(mj)xl=∑l=0n+m∑i=0l(ni)(mk−i)xl∑k=0n+m(n+mk)xk=∑l=0n+m∑i=0l(ni)(mk−i)xl(n+mk)=∑i=0l(ni)(mk−i)\begin{aligned}
	\sum_{k=0}^{n+m}\binom{n+m}{k}x^k&amp;=(x+1)^{n+m}\\
	&amp;=(x+1)^n(x+1)^m\\
	&amp;=\left[\sum_{i=0}^n\binom{n}{i}x^i\right]\left[\sum_{j=0}^m\binom{m}{j}x^j\right]\\
	&amp;=\sum_{i=0}^n\sum_{j=0}^m\binom{n}{i}\binom{m}{j}x^l\\
	&amp;=\sum_{l=0}^{n+m}\sum_{i=0}^l\binom{n}{i}\binom{m}{k-i}x^l\\
	\sum_{k=0}^{n+m}{\color{blue}\binom{n+m}{k}}x^k&amp;=\sum_{l=0}^{n+m}{\color{red}\sum_{i=0}^l\binom{n}{i}\binom{m}{k-i}}x^l\\
	\binom{n+m}{k}&amp;=\sum_{i=0}^l\binom{n}{i}\binom{m}{k-i}\\
\end{aligned}
k=0∑n+m​(kn+m​)xkk=0∑n+m​(kn+m​)xk(kn+m​)​=(x+1)n+m=(x+1)n(x+1)m=[i=0∑n​(in​)xi][j=0∑m​(jm​)xj]=i=0∑n​j=0∑m​(in​)(jm​)xl=l=0∑n+m​i=0∑l​(in​)(k−im​)xl=l=0∑n+m​i=0∑l​(in​)(k−im​)xl=i=0∑l​(in​)(k−im​)​
换个角度，考虑其组合意义。设 ∣S∣=n,∣T∣=m|S|=n,|T|=m∣S∣=n,∣T∣=m，S,TS,TS,T 中的元素每个都相同。在大小 n+mn+mn+m 的集合 S∪TS\cup TS∪T 中取出 kkk 个元素，等价于从 SSS 中取 iii 个，TTT 中取 k−ik-ik−i 个，合并。取法二中，枚举 iii 累加所有方案数，即与取法一方案数相等。
而上述意义是更利于记忆的。
推论 111
∑i=−ab(na+i)(mb−i)=(n+ma+b)(15)\sum_{i=-a}^{b}\dbinom{n}{a+i}\dbinom{m}{b-i}=\dbinom{n+m}{a+b}\tag{15}
i=−a∑b​(a+in​)(b−im​)=(a+bn+m​)(15)
证明类似。同样可以用形式化证明或组合意义。
推论 222
∑i=1n(ni)(ni−1)=(2nn−1)(16)\sum_{i=1}^{n}\dbinom{n}{i}\dbinom{n}{i-1}=\dbinom{2n}{n-1}\tag{16}
i=1∑n​(in​)(i−1n​)=(n−12n​)(16)
考虑转化为 (14)(14)(14)，
∑i=1n(ni)(ni−1)=∑i=1n(nn−i)(ni−1)=∑i=0n−1(nn−1−i)(ni)=(2nn−1)\sum_{i=1}^{n}\dbinom{n}{i}\dbinom{n}{i-1}=\sum_{i=1}^{n}\dbinom{n}{n-i}\dbinom{n}{i-1}=\sum_{i=0}^{n-1}\dbinom{n}{n-1-i}\dbinom{n}{i}=\dbinom{2n}{n-1}
i=1∑n​(in​)(i−1n​)=i=1∑n​(n−in​)(i−1n​)=i=0∑n−1​(n−1−in​)(in​)=(n−12n​)
推论 333
∑i=0n(ni)2=(2nn)(17)\sum_{i=0}^{n}\dbinom{n}{i}^2=\dbinom{2n}{n}\tag{17}
i=0∑n​(in​)2=(n2n​)(17)
依然转化，
∑i=0n(ni)2=∑i=0n(ni)(nn−i)=(2nn)\sum_{i=0}^{n}\dbinom{n}{i}^2=\sum_{i=0}^{n}\dbinom{n}{i}\dbinom{n}{n-i}=\dbinom{2n}{n}
i=0∑n​(in​)2=i=0∑n​(in​)(n−in​)=(n2n​)
推论 444
∑i=0m(ni)(mi)=(n+mm)(18)\sum_{i=0}^{m}\dbinom{n}{i}\dbinom{m}{i}=\dbinom{n+m}{m}\tag{18}
i=0∑m​(in​)(im​)=(mn+m​)(18)
还是转化
∑i=0m(ni)(mi)=∑i=0m(ni)(mm−i)=(n+mm)\sum_{i=0}^{m}\dbinom{n}{i}\dbinom{m}{i}=\sum_{i=0}^{m}\dbinom{n}{i}\dbinom{m}{m-i}=\dbinom{n+m}{m}
i=0∑m​(in​)(im​)=i=0∑m​(in​)(m−im​)=(mn+m​)
其中 (n+mm)\dbinom{n+m}{m}(mn+m​) 是网格图计数。设 (x,y)(x,y)(x,y) 表示 xxx 行 yyy 列，则从 (0,0)(0,0)(0,0) 走到 (n,m)(n,m)(n,m)，共需向下 nnn 步、向右 mmm 步，总步数为 n+mn+mn+m，从中选出 mmm 步向右即为方案数 (n+mm)\dbinom{n+m}{m}(mn+m​)。
若先走 nnn 步，其中 iii 步向右，则剩下 mmm 步需 m−im-im−i 步向左，为 (ni)(mm−i)\dbinom{n}{i}\dbinom{m}{m-i}(in​)(m−im​)，枚举 iii 累加也是答案。故左右相等。
插板法
问题
有 nnn 个完全相同的元素，将其分成 kkk 份，设第 iii 份有 xix_ixi​ 个（∑i=1kxi=n\sum_{i=1}^{k}x_i=n∑i=1k​xi​=n），求方案数。
正整数
限制条件：∀1≤i≤k,xi&gt;0\forall 1\le i\le k,x_i&gt;0∀1≤i≤k,xi​&gt;0。
考虑将 k−1k-1k−1 个板子插到 n−1n-1n−1 个空中，表示将 nnn 个元素分成 kkk 份，由于 nnn 个元素又是完全相同的，于是答案即为 (n−1k−1)=(n−1n−k)\dbinom{n-1}{k-1}=\dbinom{n-1}{n-k}(k−1n−1​)=(n−kn−1​)。
非负整数
限制条件：∀1≤i≤k,xi≥0\forall 1\le i\le k,x_i\ge 0∀1≤i≤k,xi​≥0。
考虑加入 kkk 个同样的元素，均分给 kkk 份（每份都有 111 个）。设现在第 iii 份有 xi′x&#x27;_ixi′​ 个，于是有 xi′=xi+1≥1&gt;0x&#x27;_i=x_i+1\ge 1&gt;0xi′​=xi​+1≥1&gt;0，转化成了正整数情况。于是我们算出 x′x&#x27;x′ 的取值个数后，xi=xi′−1x_i=x&#x27;_i-1xi​=xi′​−1，即可得到 xxx 相对应的非负整数情况。显然对于每个 x,x′x,x&#x27;x,x′，二者是一一对应的。
于是，有答案 (n+k−1k−1)=(n+k−1n)\dbinom{n+k-1}{k-1}=\dbinom{n+k-1}{n}(k−1n+k−1​)=(nn+k−1​)。
更一般的限制情况
限制条件：∀1≤i≤k,xi≥ai≥0\forall 1\le i\le k,x_i\ge a_i\ge 0∀1≤i≤k,xi​≥ai​≥0，其中设 ∑a=∑i=1kai≤n\sum a=\sum_{i=1}^{k}a_i\le n∑a=∑i=1k​ai​≤n。
考虑转化成非负整数限制，我们从第 iii 份中偷走 aia_iai​ 个。设现在第 iii 份有 xi′x&#x27;_ixi′​ 个，有 xi′=xi−aix&#x27;_i=x_i-a_ixi′​=xi​−ai​。
设
n′=∑i=1kxi′=∑i=1kxi−∑i=1kai=n−∑an&#x27;=\sum_{i=1}^{k}x&#x27;_i=\sum_{i=1}^{k}x_i-\sum_{i=1}^{k}a_i=n-\sum a
n′=i=1∑k​xi′​=i=1∑k​xi​−i=1∑k​ai​=n−∑a
故 x′x&#x27;x′ 取值个数为
(n′+k−1n′)=(n−∑a+k−1n−∑a)\dbinom{n&#x27;+k-1}{n&#x27;}=\dbinom{n-\sum a+k-1}{n-\sum a}
(n′n′+k−1​)=(n−∑an−∑a+k−1​)
求出 x′x&#x27;x′ 取值个数后，将偷走的元素还回去，即可一一对应得到相同取值个数的 xxx，故答案即为上式。
不相邻组合个数
从 nnn 中选 kkk 的组合 CCC，要求 ∀i,j∈C,i≠j+1\forall i,j\in C,i\ne j+1∀i,j∈C,i​=j+1，求满足这样条件的 CCC 的个数。
考虑将选的 kkk 个数视为板，将未选的 n−kn-kn−k 个数视为相同的元素，将 kkk 个板插进 n−k+1n-k+1n−k+1 个空中（空包括两侧），满足了板两两不相邻，即问题的要求，于是答案即为 (n−k+1k)\dbinom{n-k+1}{k}(kn−k+1​)。
容斥原理
对于集合 UUU 中的元素，有 nnn 个互不相同的属性。拥有第 iii 种属性的元素构成集合 SiS_iSi​。注意一个元素可能有多个属性。
我们有
∣⋃i=1nSi∣=∑j=1n(−1)j−1∑1≤a(k)&lt;a(k+1)≤n∣⋂i=1jSa(i)∣(19)\left|\bigcup_{i=1}^{n}S_i\right|=\sum_{j=1}^{n}(-1)^{j-1}\sum_{\mathclap{1\le a(k)&lt;a(k+1)\le n}}\qquad\left|\bigcap_{i=1}^{j}S_{a(i)}\right|\tag{19}
∣∣∣∣∣∣​i=1⋃n​Si​∣∣∣∣∣∣​=j=1∑n​(−1)j−11≤a(k)&lt;a(k+1)≤n​∑​∣∣∣∣∣∣​i=1⋂j​Sa(i)​∣∣∣∣∣∣​(19)
可以通过统计每个元素贡献得证。
同时若求全集 UUU 下的集合并，可得
∣⋂i=1nSi∣=∣⋃i=1nSi‾‾∣=∣U∣−∣⋃i=1nSi‾∣=∣U∣−∑j=1n(−1)j−1∑1≤a(k)&lt;a(k+1)≤n∣⋂i=1jSa(i)‾∣=∣U∣+∑j=1n(−1)j∑1≤a(k)&lt;a(k+1)≤n∣⋂i=1jSa(i)‾∣(20)\begin{aligned}
	\left|\bigcap_{i=1}^{n}S_i\right|&amp;=\left|\overline{\bigcup_{i=1}^{n}\overline{S_i}}\right|\\
	&amp;=|U|-\left|\bigcup_{i=1}^{n}\overline{S_i}\right|\\
	&amp;=|U|-\sum_{j=1}^{n}(-1)^{j-1}\sum_{\mathclap{1\le a(k)&lt;a(k+1)\le n}}\qquad\left|\bigcap_{i=1}^{j}\overline{S_{a(i)}}\right|\\
	&amp;=|U|+\sum_{j=1}^{n}(-1)^{j}\sum_{\mathclap{1\le a(k)&lt;a(k+1)\le n}}\qquad\left|\bigcap_{i=1}^{j}\overline{S_{a(i)}}\right|\tag{20}
\end{aligned}
∣∣∣∣∣∣​i=1⋂n​Si​∣∣∣∣∣∣​​=∣∣∣∣∣∣​i=1⋃n​Si​​​∣∣∣∣∣∣​=∣U∣−∣∣∣∣∣∣​i=1⋃n​Si​​∣∣∣∣∣∣​=∣U∣−j=1∑n​(−1)j−11≤a(k)&lt;a(k+1)≤n​∑​∣∣∣∣∣∣​i=1⋂j​Sa(i)​​∣∣∣∣∣∣​=∣U∣+j=1∑n​(−1)j1≤a(k)&lt;a(k+1)≤n​∑​∣∣∣∣∣∣​i=1⋂j​Sa(i)​​∣∣∣∣∣∣​​(20)
用容斥，不过用完容斥不是又要求并了吗？
二项式定理
二项式定理阐明了一个二项多项式展开后的系数与组合数的关系
(a+b)n=∑i=0n(ni)aibn−i(21)(a+b)^n=\sum_{i=0}^{n}\dbinom{n}{i}a^ib^{n-i}\tag{21}
(a+b)n=i=0∑n​(in​)aibn−i(21)
可以用组合意义证明，比较显然。
二项式反演

二项式反演为一种反演形式，常用于通过 “指定某若干个” 求 “恰好若干个” 的问题。——GXZlegend

第 000 形式
∣⋂i=1nSi‾∣=∣U∣−∣⋃i=1nSi∣=∣U∣+∑j=1n(−1)j∑1≤a(k)&lt;a(k+1)≤n∣⋂i=1jSa(i)∣∣⋂i=1nSi∣=∣U∣−∣⋃i=1nSi‾∣=∣U∣+∑j=1n(−1)j∑1≤a(k)&lt;a(k+1)≤n∣⋂i=1jSa(i)‾∣\left|\bigcap_{i=1}^{n}\overline{S_i}\right|=|U|-\left|\bigcup_{i=1}^{n}S_i\right|=|U|+\sum_{j=1}^{n}(-1)^{j}\sum_{\mathclap{1\le a(k)&lt;a(k+1)\le n}}\qquad\left|\bigcap_{i=1}^{j}S_{a(i)}\right|\\
\left|\bigcap_{i=1}^{n}S_i\right|=|U|-\left|\bigcup_{i=1}^{n}\overline{S_i}\right|=|U|+\sum_{j=1}^{n}(-1)^{j}\sum_{\mathclap{1\le a(k)&lt;a(k+1)\le n}}\qquad\left|\bigcap_{i=1}^{j}\overline{S_{a(i)}}\right|
∣∣∣∣∣∣​i=1⋂n​Si​​∣∣∣∣∣∣​=∣U∣−∣∣∣∣∣∣​i=1⋃n​Si​∣∣∣∣∣∣​=∣U∣+j=1∑n​(−1)j1≤a(k)&lt;a(k+1)≤n​∑​∣∣∣∣∣∣​i=1⋂j​Sa(i)​∣∣∣∣∣∣​∣∣∣∣∣∣​i=1⋂n​Si​∣∣∣∣∣∣​=∣U∣−∣∣∣∣∣∣​i=1⋃n​Si​​∣∣∣∣∣∣​=∣U∣+j=1∑n​(−1)j1≤a(k)&lt;a(k+1)≤n​∑​∣∣∣∣∣∣​i=1⋂j​Sa(i)​​∣∣∣∣∣∣​
当集合的交集大小只与所交的集合的数量有关时，若设 f(j)f(j)f(j) 表示任意 jjj 个集合的补集的交集大小，g(j)g(j)g(j) 表示任意 jjj 个集合的交集大小，即
f(j)≡∣⋂i=1jSa(i)‾∣(∀1≤ak&lt;ak+1≤n)g(j)≡∣⋂i=1jSa(i)∣(∀1≤ak&lt;ak+1≤n)f(j)\equiv\left|\bigcap_{i=1}^{j}\overline{S_{a(i)}}\right|\qquad(\forall 1\le a_k&lt;a_{k+1}\le n)\\
g(j)\equiv\left|\bigcap_{i=1}^{j}S_{a(i)}\right|\qquad(\forall 1\le a_k&lt;a_{k+1}\le n)
f(j)≡∣∣∣∣∣∣​i=1⋂j​Sa(i)​​∣∣∣∣∣∣​(∀1≤ak​&lt;ak+1​≤n)g(j)≡∣∣∣∣∣∣​i=1⋂j​Sa(i)​∣∣∣∣∣∣​(∀1≤ak​&lt;ak+1​≤n)
代入，
f(n)=∣U∣+∑j=1n(−1)j∑1≤a(k)&lt;a(k+1)≤ng(j)=∑j=0n(−1)j(nj)g(j)g(n)=∣U∣+∑j=1n(−1)j∑1≤a(k)&lt;a(k+1)≤nf(j)=∑j=0n(−1)j(nj)f(j)f(n)=|U|+\sum_{j=1}^{n}(-1)^{j}\sum_{\mathclap{1\le a(k)&lt;a(k+1)\le n}}g(j)=\sum_{j=0}^{n}(-1)^{j}\dbinom{n}{j}g(j)\\
g(n)=|U|+\sum_{j=1}^{n}(-1)^{j}\sum_{\mathclap{1\le a(k)&lt;a(k+1)\le n}}f(j)=\sum_{j=0}^{n}(-1)^{j}\dbinom{n}{j}f(j)
f(n)=∣U∣+j=1∑n​(−1)j1≤a(k)&lt;a(k+1)≤n​∑​g(j)=j=0∑n​(−1)j(jn​)g(j)g(n)=∣U∣+j=1∑n​(−1)j1≤a(k)&lt;a(k+1)≤n​∑​f(j)=j=0∑n​(−1)j(jn​)f(j)
这里之所以 ∣U∣|U|∣U∣ 能被吸收进 sigma 中是因为 ∩\cap∩ 的单位元是全集 UUU。当 j=0j=0j=0 时，(−1)j(nj)g(j)=1×1×g(0)=∣U∣(-1)^{j}\dbinom{n}{j}g(j)=1\times 1\times g(0)=|U|(−1)j(jn​)g(j)=1×1×g(0)=∣U∣。
于是我们得到了二项式反演的第 000 形式：
f(n)=∑j=0n(−1)j(nj)g(j)  ⟺  g(n)=∑j=0n(−1)j(nj)f(j)(22)f(n)=\sum_{j=0}^{n}(-1)^{j}\dbinom{n}{j}g(j)
\iff
g(n)=\sum_{j=0}^{n}(-1)^{j}\dbinom{n}{j}f(j)\tag{22}
f(n)=j=0∑n​(−1)j(jn​)g(j)⟺g(n)=j=0∑n​(−1)j(jn​)f(j)(22)
第 111 形式
考虑设 h(j)=(−1)jg(j)h(j)=(-1)^jg(j)h(j)=(−1)jg(j)，代入，
f(n)=∑j=0n(nj)h(j)  ⟺  h(n)(−1)n=∑j=0n(−1)j(nj)f(j)  ⟺  h(n)=∑j=0n(−1)n+j(nj)f(j)  ⟺  h(n)=∑j=0n(−1)n−j(nj)f(j)\begin{aligned}
	f(n)=\sum_{j=0}^{n}\dbinom{n}{j}h(j)
	&amp;\iff\cfrac{h(n)}{(-1)^{n}}=\sum_{j=0}^{n}(-1)^{j}\dbinom{n}{j}f(j)\\
	&amp;\iff h(n)=\sum_{j=0}^{n}(-1)^{n+j}\dbinom{n}{j}f(j)\\
	&amp;\iff h(n)=\sum_{j=0}^{n}(-1)^{n-j}\dbinom{n}{j}f(j)\\
\end{aligned}
f(n)=j=0∑n​(jn​)h(j)​⟺(−1)nh(n)​=j=0∑n​(−1)j(jn​)f(j)⟺h(n)=j=0∑n​(−1)n+j(jn​)f(j)⟺h(n)=j=0∑n​(−1)n−j(jn​)f(j)​
于是我们得到了二项式反演的第 111 形式：
f(n)=∑j=0n(nj)h(j)  ⟺  h(n)=∑j=0n(−1)n−j(nj)f(j)(23)f(n)=\sum_{j=0}^{n}\dbinom{n}{j}h(j)
\iff
h(n)=\sum_{j=0}^{n}(-1)^{n-j}\dbinom{n}{j}f(j)\tag{23}
f(n)=j=0∑n​(jn​)h(j)⟺h(n)=j=0∑n​(−1)n−j(jn​)f(j)(23)
第 1.51.51.5 形式
第 111 形式更加一般的情况，
f(n)=∑j=mn(nj)h(j)  ⟺  h(n)=∑j=mn(−1)n−j(nj)f(j)(24)f(n)=\sum_{j=m}^{n}\dbinom{n}{j}h(j)
\iff
h(n)=\sum_{j=m}^{n}(-1)^{n-j}\dbinom{n}{j}f(j)\tag{24}
f(n)=j=m∑n​(jn​)h(j)⟺h(n)=j=m∑n​(−1)n−j(jn​)f(j)(24)
考虑证明：
代入（记 k=j−ik=j-ik=j−i）
f(n)=∑j=mn(nj)∑i=mj(−1)j−i(ji)f(i)=∑j=mn∑i=mj(−1)j−i(nj)(ji)f(i)=∑j=mn∑i=mj(−1)j−i(ni)(n−ij−i)f(i)=∑i=mn∑j=in(−1)j−i(ni)(n−ij−i)f(i)=∑i=mn(ni)f(i)∑j=in(−1)j−i(n−ij−i)=∑i=mn(ni)f(i)∑k=0n−i(−1)k(n−ik)=∑i=mn(ni)f(i)[n−i=0]=(nn)f(n)=f(n)□\begin{aligned}
	f(n)&amp;=\sum_{j=m}^{n}\dbinom{n}{j}\sum_{i=m}^{j}(-1)^{j-i}\dbinom{j}{i}f(i)\\
	&amp;=\sum_{j=m}^{n}\sum_{i=m}^{j}(-1)^{j-i}\dbinom{n}{j}\dbinom{j}{i}f(i)\\
	&amp;=\sum_{j=m}^{n}\sum_{i=m}^{j}(-1)^{j-i}\dbinom{n}{i}\dbinom{n-i}{j-i}f(i)\\
	&amp;=\sum_{i=m}^{n}\sum_{j=i}^{n}(-1)^{j-i}\dbinom{n}{i}\dbinom{n-i}{j-i}f(i)\\
	&amp;=\sum_{i=m}^{n}\dbinom{n}{i}f(i)\sum_{j=i}^{n}(-1)^{j-i}\dbinom{n-i}{j-i}\\
	&amp;=\sum_{i=m}^{n}\dbinom{n}{i}f(i)\sum_{k=0}^{n-i}(-1)^{k}\dbinom{n-i}{k}\\
	&amp;=\sum_{i=m}^{n}\dbinom{n}{i}f(i)[n-i=0]\\
	&amp;=\dbinom{n}{n}f(n)\\
	&amp;=f(n)&amp;\square\\
\end{aligned}
f(n)​=j=m∑n​(jn​)i=m∑j​(−1)j−i(ij​)f(i)=j=m∑n​i=m∑j​(−1)j−i(jn​)(ij​)f(i)=j=m∑n​i=m∑j​(−1)j−i(in​)(j−in−i​)f(i)=i=m∑n​j=i∑n​(−1)j−i(in​)(j−in−i​)f(i)=i=m∑n​(in​)f(i)j=i∑n​(−1)j−i(j−in−i​)=i=m∑n​(in​)f(i)k=0∑n−i​(−1)k(kn−i​)=i=m∑n​(in​)f(i)[n−i=0]=(nn​)f(n)=f(n)​□​
第 222 形式
f(n)=∑j=nm(jn)g(j)  ⟺  g(n)=∑j=nm(−1)j−n(jn)f(j)(25)f(n)=\sum_{j=n}^{m}\dbinom{j}{n}g(j)
\iff
g(n)=\sum_{j=n}^{m}(-1)^{j-n}\dbinom{j}{n}f(j)\tag{25}
f(n)=j=n∑m​(nj​)g(j)⟺g(n)=j=n∑m​(−1)j−n(nj​)f(j)(25)
证明与第 1.51.51.5 形式类似，略。简称懒得写了（。
康托展开
一些定义
有一个长度为 nnn 的排列 PPP。
定义排列通过字典序比大小，即若长度为 nnn 的排列 A,BA,BA,B 有

任意 1≤j&lt;i≤n,Aj=Bj1\le j&lt;i\le n,A_j=B_j1≤j&lt;i≤n,Aj​=Bj​；
Ai&lt;BiA_i&lt;B_iAi​&lt;Bi​，

则有排列 A&lt;BA&lt;BA&lt;B。这里不考虑长度不一样的情况。
定义一个排列 PPP 的排名 rnk(P)rnk(P)rnk(P) 为比它小的排列数量 +1+1+1。
康托展开
给定 PPP，求 rnk(P)rnk(P)rnk(P)。
等价于：求长度为 nnn 的排列 QQQ，满足 Q&lt;PQ&lt;PQ&lt;P 的数量（+1+1+1）。
考虑枚举定义中的 iii。于是 ∀1≤j&lt;i≤n,Qj=Pj\forall 1\le j&lt;i\le n,Q_j=P_j∀1≤j&lt;i≤n,Qj​=Pj​。那么 QiQ_iQi​ 可以是哪些数呢？

Qi&lt;Pi  ⟹  Qi≠Pi  ⟹  i≠kQ_i&lt;P_i\implies Q_i\ne P_i\implies i\ne kQi​&lt;Pi​⟹Qi​​=Pi​⟹i​=k。
Qi≠Qj  ⟺  ∃k,i≤k,Qi=PkQ_i\ne Q_j\iff \exists k,i\le k,Q_i=P_kQi​​=Qj​⟺∃k,i≤k,Qi​=Pk​。

  ⟹  ∃k,i&lt;k,Qi=Pk&lt;Pi\implies\exists k,i&lt;k,Q_i=P_k&lt;P_i⟹∃k,i&lt;k,Qi​=Pk​&lt;Pi​，故 QiQ_iQi​ 的取值数量（记为 f(i)f(i)f(i)）即为
f(i)=∑k=i+1n[Pk&lt;Pi]f(i)=\sum_{k=i+1}^{n}[P_k&lt;P_i]
f(i)=k=i+1∑n​[Pk​&lt;Pi​]
其中 [X][X][X] 表示条件 XXX 是真（111）/假（000）。
这是典型的二维偏序问题。可以用树状数组实现。
求出了 QiQ_iQi​ 取值数量，考虑求 Qi+1∼QnQ_{i+1}\sim Q_nQi+1​∼Qn​ 的排列数量。
由于已经满足 Qi&lt;PiQ_i&lt;P_iQi​&lt;Pi​，故后面 (n−i)(n-i)(n−i) 个数可以随便排列，排列数量为 (n−i)!(n-i)!(n−i)!。故在 iii 处小于 PPP 的排列数量为
(n−i)!×f(i)(n-i)!\times f(i)
(n−i)!×f(i)
将所有 iii 的贡献相加，即可得到
rnk(P)=1+∑i=1n(n−i)!×f(i)rnk(P)=1+\sum_{i=1}^{n}(n-i)!\times f(i)
rnk(P)=1+i=1∑n​(n−i)!×f(i)
倒序枚举 iii，f(i)f(i)f(i) 可以使用树状数组在 O(log⁡n)O(\log n)O(logn) 时间计算，故该算法可以在 O(nlog⁡n)O(n\log n)O(nlogn) 时间内计算某个排列的排名，被称为康托展开。
逆康托展开
排名可以逆推得到排列。
但可以发现有 n=20n=20n=20 时，全排列数量 n!=2432902008176640000&gt;1018n!=2432902008176640000&gt;10^{18}n!=2432902008176640000&gt;1018。
所以，若题目给的排名 rnk(P)≤1018rnk(P)\le 10^{18}rnk(P)≤1018（不需要高精），有 n=∣P∣≤20n=|P|\le 20n=∣P∣≤20。
于是，我们可以完成如下 nnn 次操作：

设 r0=rnk(P)−1r_0=rnk(P)-1r0​=rnk(P)−1，集合 S={1,2,⋯ ,n}S=\{1,2,\cdots,n\}S={1,2,⋯,n}。
对于第 jjj 次操作，rj←rj−1 mod (n−j)!r_j\gets r_{j-1}\bmod (n-j)!rj​←rj−1​mod(n−j)!，kj←rj−1−rj(n−j)!k_j\gets\cfrac{r_{j-1}-r_j}{(n-j)!}kj​←(n−j)!rj−1​−rj​​。
从 SSS 中取出第 (kj+1)(k_j+1)(kj​+1) 大的元素 xxx，有 Pj=xP_j=xPj​=x。从 SSS 中删除 xxx。
重复进行上面两步 nnn 次。

解释一下：
每次操作从 rj−1r_{j-1}rj−1​ 中分离出 f(j)f(j)f(j)，以 j=1j=1j=1 为例
r0=∑i=1n(n−i)!×f(i)r1←r0 mod (n−1)!=(∑i=1n(n−i)!×f(i)) mod (n−1)!=∑i=1n((n−i)!×f(i) mod (n−1)!)=((n−1)!×f(1) mod (n−1)!)+∑i=2n((n−i)!×f(i) mod (n−1)!)=∑i=2n((n−i)!×f(i) mod (n−1)!)∵f(i)=∑k=i+1n[Pk&lt;Pi]≤n−i&lt;n−i+1∴(n−i)!×f(i)&lt;(n−i)!×(n−i+1)=(n−i+1)!≤(n−1)!∴(n−i)!×f(i)&lt;(n−1)!∴(n−i)!×f(i) mod (n−1)!=(n−i)!×f(i)∴r1←∑i=2n((n−i)!×f(i) mod (n−1)!)=∑i=2n(n−i)!×f(i)r_0=\sum_{i=1}^{n}(n-i)!\times f(i)\\
\begin{aligned}
	r_1&amp;\gets r_0\bmod (n-1)!\\
	&amp;=\left(\sum_{i=1}^{n}(n-i)!\times f(i)\right)\bmod (n-1)!\\
	&amp;=\sum_{i=1}^{n}\Big((n-i)!\times f(i)\bmod (n-1)!\Big)\\
	&amp;=\Big((n-1)!\times f(1)\bmod (n-1)!\Big)+\sum_{i=2}^{n}\Big((n-i)!\times f(i)\bmod (n-1)!\Big)\\
	&amp;=\sum_{i=2}^{n}\Big((n-i)!\times f(i)\bmod (n-1)!\Big)
\end{aligned}\\
\begin{aligned}
	\because &amp; f(i)=\sum_{k=i+1}^{n}[P_k&lt;P_i]\le n-i&lt;n-i+1\\
	\therefore &amp; (n-i)!\times f(i)&lt;(n-i)!\times (n-i+1)=(n-i+1)!\le (n-1)!\\
	\therefore &amp; (n-i)!\times f(i)&lt;(n-1)!\\
	\therefore &amp; (n-i)!\times f(i)\bmod (n-1)!=(n-i)!\times f(i)\\
	\therefore &amp; r_1\gets \sum_{i=2}^{n}\Big((n-i)!\times f(i)\bmod (n-1)!\Big)=\sum_{i=2}^{n}(n-i)!\times f(i)
\end{aligned}\\
r0​=i=1∑n​(n−i)!×f(i)r1​​←r0​mod(n−1)!=(i=1∑n​(n−i)!×f(i))mod(n−1)!=i=1∑n​((n−i)!×f(i)mod(n−1)!)=((n−1)!×f(1)mod(n−1)!)+i=2∑n​((n−i)!×f(i)mod(n−1)!)=i=2∑n​((n−i)!×f(i)mod(n−1)!)​∵∴∴∴∴​f(i)=k=i+1∑n​[Pk​&lt;Pi​]≤n−i&lt;n−i+1(n−i)!×f(i)&lt;(n−i)!×(n−i+1)=(n−i+1)!≤(n−1)!(n−i)!×f(i)&lt;(n−1)!(n−i)!×f(i)mod(n−1)!=(n−i)!×f(i)r1​←i=2∑n​((n−i)!×f(i)mod(n−1)!)=i=2∑n​(n−i)!×f(i)​
有没有发现 r1r_1r1​ 与 r0r_0r0​ 几乎一致（除了 sigma 下界从 111 变成 222）？
对于 k1k_1k1​，
k1←r0−r1(n−1)!=∑i=1n(n−i)!×f(i)−∑i=2n(n−i)!×f(i)(n−1)!=(n−1)!×f(1)(n−1)!=f(1)\begin{aligned}
	k_1&amp;\gets\cfrac{r_0-r_1}{(n-1)!}\\
	&amp;=\cfrac{\sum_{i=1}^{n}(n-i)!\times f(i)-\sum_{i=2}^{n}(n-i)!\times f(i)}{(n-1)!}\\
	&amp;=\cfrac{(n-1)!\times f(1)}{(n-1)!}\\
	&amp;=f(1)
\end{aligned}
k1​​←(n−1)!r0​−r1​​=(n−1)!∑i=1n​(n−i)!×f(i)−∑i=2n​(n−i)!×f(i)​=(n−1)!(n−1)!×f(1)​=f(1)​
如此这般，我们进行了完美的迭代，每次将 f(j)f(j)f(j) 分离，从 SSS 中找出合适的 xxx。然后将 rj−1r_{j-1}rj−1​ 中 i=ji=ji=j 那项消去（simga 上界加 111）。
形式化地说，我们的处理方式使得有 rj,kjr_j,k_jrj​,kj​ 的通项公式
rj=∑i=j+1n(n−i)!×f(i)kj=f(j)r_j=\sum_{i=j+1}^{n}(n-i)!\times f(i)\\
k_j=f(j)
rj​=i=j+1∑n​(n−i)!×f(i)kj​=f(j)

SSS 可以用 vector 维护，复杂度 O(n2)O(n^2)O(n2)。因为 n≤20n\le 20n≤20，复杂度足够。
若毒瘤出题人让 rnk(P)&gt;1018rnk(P)&gt;10^{18}rnk(P)&gt;1018，也不要紧。上线段树二分维护 SSS 即可。
抽屉原理
简单情况
对于 n+1n+1n+1 个物品分为 nnn 组，必存在某组分到的物品数大于 111 个。
显然的，可以用反证法证明。
一般情况
对于 nnn 个物品分到 kkk 组，必存在某组分到的物品数大于等于 ⌈nk⌉\left\lceil\dfrac{n}{k}\right\rceil⌈kn​⌉ 个。
反证法：若每一组均小于 ⌈nk⌉\left\lceil\dfrac{n}{k}\right\rceil⌈kn​⌉ 个，则由 ⌈nk⌉&lt;nk+1\left\lceil\dfrac{n}{k}\right\rceil&lt;\dfrac{n}{k}+1⌈kn​⌉&lt;kn​+1 可得
n≤(⌈nk⌉−1)×k&lt;(nk+1−1)×k=nn\le\left(\left\lceil\dfrac{n}{k}\right\rceil-1\right)\times k&lt;\left(\dfrac{n}{k}+1-1\right)\times k=n
n≤(⌈kn​⌉−1)×k&lt;(kn​+1−1)×k=n
矛盾。
错位排列
定义
对于长度为 nnn 的排列 PPP，若 ∀1≤i≤n,Pi≠n\forall 1\le i\le n,P_i\ne n∀1≤i≤n,Pi​​=n，则称它是一个错位排列。
设 DnD_nDn​ 为长度为 nnn 的错位排列数，求 DnD_nDn​。
基于容斥原理
考虑容斥解决。我们有全集 UUU 为 nnn 的全排列（∣U∣=n!|U|=n!∣U∣=n!），nnn 个属性，第 iii 个为 Pi≠iP_i\ne iPi​​=i。
我们有（这里去掉了 1≤a(k)&lt;a(k+1)≤n1\le a(k)&lt;a(k+1)\le n1≤a(k)&lt;a(k+1)≤n 方便展示）
Dn=∣⋂i=1nSi∣=∣U∣−∣⋃i=1nSi‾∣=∣U∣+∑j=1n(−1)j∑a(k)∣⋂i=1jSa(i)‾∣(26)\begin{aligned}
	D_n&amp;=\left|\bigcap_{i=1}^{n}S_i\right|\\
	&amp;=|U|-\left|\bigcup_{i=1}^{n}\overline{S_i}\right|\\
	&amp;=|U|+\sum_{j=1}^{n}(-1)^{j}\sum_{a(k)}\left|\bigcap_{i=1}^{j}\overline{S_{a(i)}}\right|\\
\end{aligned}\tag{26}
Dn​​=∣∣∣∣∣∣​i=1⋂n​Si​∣∣∣∣∣∣​=∣U∣−∣∣∣∣∣∣​i=1⋃n​Si​​∣∣∣∣∣∣​=∣U∣+j=1∑n​(−1)ja(k)∑​∣∣∣∣∣∣​i=1⋂j​Sa(i)​​∣∣∣∣∣∣​​(26)
考虑上式的意义。可以发现 ∣⋂i=1jSa(i)‾∣\left|\bigcap_{i=1}^{j}\overline{S_{a(i)}}\right|∣∣∣∣​⋂i=1j​Sa(i)​​∣∣∣∣​ 即为满足 Pa(i)=aiP_{a(i)}=a_iPa(i)​=ai​ 的排列数量，固定的共有 jjj 位，剩下 n−jn-jn−j 为可以随意选择，于是有 (n−j)!(n-j)!(n−j)! 个排列。
同时，选择出 jjj 个 aia_iai​ 方案数为 (nj)\dbinom{n}{j}(jn​)，故
Dn=∣U∣+∑j=1n(−1)j∑a(k)∣⋂i=1jSa(i)‾∣=∣U∣+∑j=1n(−1)j(nj)(n−j)!=(−1)0(n0)n!+∑j=1n(−1)jn!j!(n−j)!×(n−j)!=∑j=0n(−1)jn!j!=n!∑j=0n(−1)jj!(26)\begin{aligned}
	D_n&amp;=|U|+\sum_{j=1}^{n}(-1)^{j}\sum_{a(k)}\left|\bigcap_{i=1}^{j}\overline{S_{a(i)}}\right|\\
	&amp;=|U|+\sum_{j=1}^{n}(-1)^{j}\dbinom{n}{j}(n-j)!\\
	&amp;=(-1)^0\dbinom{n}{0}n!+\sum_{j=1}^{n}(-1)^{j}\cfrac{n!}{j!(n-j)!}\times (n-j)!\\
	&amp;=\sum_{j=0}^{n}(-1)^j\cfrac{n!}{j!}\\
	&amp;=n!\sum_{j=0}^{n}\cfrac{(-1)^j}{j!}\\
\end{aligned}\tag{26}
Dn​​=∣U∣+j=1∑n​(−1)ja(k)∑​∣∣∣∣∣∣​i=1⋂j​Sa(i)​​∣∣∣∣∣∣​=∣U∣+j=1∑n​(−1)j(jn​)(n−j)!=(−1)0(0n​)n!+j=1∑n​(−1)jj!(n−j)!n!​×(n−j)!=j=0∑n​(−1)jj!n!​=n!j=0∑n​j!(−1)j​​(26)
另外，观察到式 (26)(26)(26) 的形式与 ex\mathrm{e}^xex 类似
ex=∑i=0∞xii!e−1=∑i=0∞(−1)ii!n!e≈n!∑i=0n(−1)ii!=Dn\begin{aligned}
	\mathrm{e}^x&amp;=\sum_{i=0}^{\infty}\cfrac{x^i}{i!}\\
	\mathrm{e}^{-1}&amp;=\sum_{i=0}^{\infty}\cfrac{(-1)^i}{i!}\\
	\cfrac{n!}{\mathrm{e}}&amp;\approx n!\sum_{i=0}^{n}\cfrac{(-1)^i}{i!}=D_n
\end{aligned}
exe−1en!​​=i=0∑∞​i!xi​=i=0∑∞​i!(−1)i​≈n!i=0∑n​i!(−1)i​=Dn​​
我们有 Dn≈n!eD_n\approx\cfrac{n!}{\mathrm{e}}Dn​≈en!​。除了美观，没什么用。
基于递推
对于 nnn 的错排，暂且假设 Pn=nP_n=nPn​=n，有以下两种方式可以一步将 PPP 改成错排

若 P1∼Pn−1P_1\sim P_{n-1}P1​∼Pn−1​ 是错排，那么任意 1≤i&lt;n1\le i&lt;n1≤i&lt;n，交换 Pi,PnP_i,P_nPi​,Pn​ 即可。iii 有 n−1n-1n−1 个可能的取值，P1∼Pn−1P_1\sim P_{n-1}P1​∼Pn−1​ 错排方案数为 Dn−1D_{n-1}Dn−1​。
若 P1∼Pn−1P_1\sim P_{n-1}P1​∼Pn−1​ 不是错排，有且只有一个位置 iii，满足 Pi=iP_i=iPi​=i，那么依然交换 Pi,PnP_i,P_nPi​,Pn​。同样的，iii 有 n−1n-1n−1 个可能的取值，而除 iii 外的其他部分为错排，方案数为 Dn−2D_{n-2}Dn−2​。

于是得到
Dn=(n−1)Dn−1+(n−1)Dn−2=(n−1)(Dn−1+Dn−2)(27)D_n=(n-1)D_{n-1}+(n-1)D_{n-2}=(n-1)(D_{n-1}+D_{n-2})\tag{27}
Dn​=(n−1)Dn−1​+(n−1)Dn−2​=(n−1)(Dn−1​+Dn−2​)(27)
另有
Dn=nDn−1+(−1)nD_n=nD_{n-1}+(-1)^{n}
Dn​=nDn−1​+(−1)n
常见数（列）
斐波那契数列
定义
斐波那契数列的定义如下：
Fi={0i=01i=1Fi−1+Fi−2otherwise(28)F_i=\begin{cases}
	0 &amp; i=0\\
	1 &amp; i=1\\
	F_{i-1}+F_{i-2} &amp; \text{otherwise}
\end{cases}\tag{28}
Fi​=⎩⎪⎪⎨⎪⎪⎧​01Fi−1​+Fi−2​​i=0i=1otherwise​(28)
同时我们有卢卡斯数列：
Li={2i=01i=1Li−1+Li−2otherwise(29)L_i=\begin{cases}
	2 &amp; i=0\\
	1 &amp; i=1\\
	L_{i-1}+L_{i-2} &amp; \text{otherwise}
\end{cases}\tag{29}
Li​=⎩⎪⎪⎨⎪⎪⎧​21Li−1​+Li−2​​i=0i=1otherwise​(29)
计算
斐波那契数列可以 O(n)O(n)O(n) 递推计算，但还有更快的计算方法。
我们有斐波那契数列的通项公式：
Fn=(1+52)n−(1−52)n5(30)F_n=\cfrac{\left(\frac{1+\sqrt{5}}{2}\right)^n-\left(\frac{1-\sqrt{5}}{2}\right)^n}{\sqrt{5}}\tag{30}
Fn​=5​(21+5​​)n−(21−5​​)n​(30)
在模意义下有意义。平常用不到。
对于卢卡斯数列：
Fn=(1+52)n+(1−52)n(31)F_n=\left(\frac{1+\sqrt{5}}{2}\right)^n+\left(\frac{1-\sqrt{5}}{2}\right)^n\tag{31}
Fn​=(21+5​​)n+(21−5​​)n(31)
当然，可以使用矩阵加速递推
[FnFn+1]=[Fn−1Fn][0111]=[F0F1][0111]n(32)\begin{bmatrix}
	F_n &amp; F_{n+1}
\end{bmatrix}
=
\begin{bmatrix}
	F_{n-1} &amp; F_{n}
\end{bmatrix}
\begin{bmatrix}
	0 &amp; 1\\
	1 &amp; 1
\end{bmatrix}
=
\begin{bmatrix}
	F_0 &amp; F_1
\end{bmatrix}
\begin{bmatrix}
	0 &amp; 1\\
	1 &amp; 1
\end{bmatrix}^n
\tag{32}
[Fn​​Fn+1​​]=[Fn−1​​Fn​​][01​11​]=[F0​​F1​​][01​11​]n(32)
于是运用矩阵快速幂，我们可以 O(log⁡n)O(\log n)O(logn) 时间内计算斐波那契数列。
也可以使用倍增的技巧。考虑斐波那契数列的递推式，对它进行拓展
Fi+1=Fi+Fi−1Fi+2=Fi+1+Fi=2Fi+Fi−1Fi+3=Fi+2+Fi+1=3Fi+2Fi−1Fi+4=Fi+3+Fi+2=5Fi+3Fi−1Fi+5=Fi+4+Fi+3=8Fi+5Fi−1\begin{aligned}
	F_{i+1}&amp;=F_{i}+F_{i-1}\\
	F_{i+2}=F_{i+1}+F_{i}&amp;=2F_{i}+F_{i-1}\\
	F_{i+3}=F_{i+2}+F_{i+1}&amp;=3F_{i}+2F_{i-1}\\
	F_{i+4}=F_{i+3}+F_{i+2}&amp;=5F_{i}+3F_{i-1}\\
	F_{i+5}=F_{i+4}+F_{i+3}&amp;=8F_{i}+5F_{i-1}\\
\end{aligned}
Fi+1​Fi+2​=Fi+1​+Fi​Fi+3​=Fi+2​+Fi+1​Fi+4​=Fi+3​+Fi+2​Fi+5​=Fi+4​+Fi+3​​=Fi​+Fi−1​=2Fi​+Fi−1​=3Fi​+2Fi−1​=5Fi​+3Fi−1​=8Fi​+5Fi−1​​
可得：
Fi+j=Fj+1Fi+FjFi−1F2k=Fk+1Fk+FkFk−1=FkFk+1+Fk(Fk+1−Fk)=Fk(2Fk+1−Fk)F2k+1=Fk+1Fk+1+FkFk−1+1=Fk+12+Fk2(33)\begin{aligned}
	F_{i+j}&amp;=F_{j+1}F_{i}+F_{j}F_{i-1}\\
	F_{2k}&amp;=F_{k+1}F_{k}+F_{k}F_{k-1}=F_{k}F_{k+1}+F_{k}(F_{k+1}-F_{k})=F_{k}(2F_{k+1}-F_{k})\\
	F_{2k+1}&amp;=F_{k+1}F_{k+1}+F_{k}F_{k-1+1}=F_{k+1}^2+F_{k}^2
\end{aligned}\tag{33}
Fi+j​F2k​F2k+1​​=Fj+1​Fi​+Fj​Fi−1​=Fk+1​Fk​+Fk​Fk−1​=Fk​Fk+1​+Fk​(Fk+1​−Fk​)=Fk​(2Fk+1​−Fk​)=Fk+1​Fk+1​+Fk​Fk−1+1​=Fk+12​+Fk2​​(33)
std::pair&lt;int,int&gt; fib(int n)&#123;    if(!n)return &#123;0,1&#125;;    auto r=fib(n&gt;&gt;1);    int c=p.first*(2*p.second-p.first),        d=p.first*p.first+p.second*p.second;    return (n&amp;1)?&#123;d,c+d&#125;:&#123;c+d&#125;;&#125;
性质

Fn−1Fn+1−Fn2=(−1)nF_{n-1}F_{n+1}-F_n^2=(-1)^nFn−1​Fn+1​−Fn2​=(−1)n；
(33)(33)(33) 式；
∀k∈N,Fn∣Fnk\forall k\in\Bbb{N},F_n|F_{nk}∀k∈N,Fn​∣Fnk​；
∀Fa∣Fb,a∣b\forall F_a|F_b,a|b∀Fa​∣Fb​,a∣b；
gcd⁡(Fa,Fb)=Fgcd⁡(a,b)\gcd(F_a,F_b)=F_{\gcd(a,b)}gcd(Fa​,Fb​)=Fgcd(a,b)​；
以斐波那契数列相邻两项作为输入会使欧几里德算法达到最坏复杂度。

卡特兰数
相关问题（应用）
卡特兰数列 HnH_nHn​ 一般应用于以下基本问题：

将大小为 nnn 的问题分解为规模之和为 n−1n-1n−1 的两个子问题。比如二叉树的构造方案数、不相交弦本质不同方案数、凸包三角形划分方案数等。

对于另一种看似也很基本的问题，其实可以转化为上述基本问题：

可以抽象为平面直角坐标系上行走的问题。具体的，从 (0,0)(0,0)(0,0) 走到 (2n,0)(2n,0)(2n,0)，每次从 (x,y)(x,y)(x,y) 向右上 (x+1,y+1)(x+1,y+1)(x+1,y+1) 或右下 (x+1,y−1)(x+1,y-1)(x+1,y−1) 走，且不走到 xxx 轴下方，的路径方案数。如出栈序列数、买票找零等。以出栈序列数为例，可以证明出栈序列与操作序列是一一对应的，而操作序列中入栈操作可以视为向右上走，出栈可以视为向右下走，横坐标对应时间，纵坐标对应栈的大小，触碰 xxx 轴对应栈空。

如何将这种问题（2）转化为基本问题（1）呢？



对于这种问题，我们假设路径在 (2i,0)(2i,0)(2i,0) 处第一次触碰 xxx 轴（除起点外，可以是终点）。为了保证第一次，从 (0,0)(0,0)(0,0) 到 (2i,0)(2i,0)(2i,0) 的路径不能触碰 xxx 轴。怎样保证呢？考虑先从 (0,0)(0,0)(0,0) 走到 (1,1)(1,1)(1,1)，然后保证路径不在 y=1y=1y=1 下方，即不会触碰 xxx 轴，走到 (2i−1,1)(2i-1,1)(2i−1,1)。然后在从 (2i−1,1)(2i-1,1)(2i−1,1) 走到 (2i,0)(2i,0)(2i,0)，完成第一次触碰。接下来可以只需不走到 xxx 轴下方，从 (2i,0)(2i,0)(2i,0) 走到 (2n,0)(2n,0)(2n,0) 即可。
于是我们得到第一部分路径方案数为 Hi−1H_{i-1}Hi−1​，第二部分则为 Hn−iH_{n-i}Hn−i​。根据乘法原理和加法原理，我们枚举每个 iii 即可得到
Hn={1n=0,1∑i=1nHi−1Hn−iotherwise(34)H_n=\begin{cases}
	1&amp;n=0,1\\
	\sum\limits_{i=1}^{n}H_{i-1}H_{n-i}&amp;\text{otherwise}
\end{cases}\tag{34}
Hn​=⎩⎪⎨⎪⎧​1i=1∑n​Hi−1​Hn−i​​n=0,1otherwise​(34)
而基本问题（1）的方案数显然也是上式。于是我们就得到了二问题等价。(34)(34)(34) 式为卡特兰数的一个递推式。
注：对于问题（2），其他资料中常有等价描述：设非降路径是指只能向上或向右走的路径，求不走到对角线 y=xy=xy=x 上方（但可以触碰）的情况下从 (0,0)(0,0)(0,0) 到达 (n,n)(n,n)(n,n) 的可能路径数。可以通过旋转、轴对称发现二描述等价。本文为了方便思考、与出栈序列问题相对应，采用了不同的描述方式。
公式
我们考虑问题（2）的组合意义。若不考虑“不走到 xxx 轴下方”这一限制条件，我们有答案 (2nn)\dbinom{2n}{n}(n2n​)，即在 2n2n2n 步中，选出 nnn 步向右上，另外 nnn 步向右下。
考虑如何处理走到 xxx 轴下方的情况。对于所有不合法路径（即走到 xxx 轴下方的路径），我们将第一次走到 xxx 轴下方之后的路径，即第一次触碰 y=−1y=-1y=−1 之后的路径，以 y=−1y=-1y=−1 为对称轴翻转。之前的路径不变。可以证明，翻转后的路径均可以和原路径一一对应。



如图，虚线为翻转前的不合法路径，点线为翻转后的路径，点划线则为二者公共部分。
经过观察，发现翻转后的路径从 (0,0)(0,0)(0,0) 走到 (2n,−2)(2n,-2)(2n,−2)。即在 2n2n2n 步中选出 n−1n-1n−1 步向右上，其他向右下的路径。方案数为 (2nn−1)\dbinom{2n}{n-1}(n−12n​)。将全部方案减去不合法方案，即得到全部合法方案数为：
Hn=(2nn)−(2nn−1)(35)H_n=\dbinom{2n}{n}-\dbinom{2n}{n-1}\tag{35}
Hn​=(n2n​)−(n−12n​)(35)
进一步地，
Hn=(2nn)−(2nn−1)=(2n)!n!n!−(2n!)(n−1)!(n+1)!Let t=(n−1)!=(2n)![1n2t2−1n(n+1)t2]=(2n)!t2n(1n−1n+1)=(2n)!t2n×n+1−nn(n+1)=(2n)!t2n2(n+1)=(2n)!n!n!(n+1)Hn=(2nn)n+1(36)\begin{aligned}
	H_n&amp;=\dbinom{2n}{n}-\dbinom{2n}{n-1}\\
	&amp;=\cfrac{(2n)!}{n!n!}-\cfrac{(2n!)}{(n-1)!(n+1)!}\\
	&amp;\text{Let $t=(n-1)!$}\\
	&amp;=(2n)!\left[\cfrac{1}{n^2t^2}-\cfrac{1}{n(n+1)t^2}\right]\\
	&amp;=\cfrac{(2n)!}{t^2n}\left(\cfrac{1}{n}-\cfrac{1}{n+1}\right)\\
	&amp;=\cfrac{(2n)!}{t^2n}\times\cfrac{n+1-n}{n(n+1)}\\
	&amp;=\cfrac{(2n)!}{t^2n^2(n+1)}\\
	&amp;=\cfrac{(2n)!}{n!n!(n+1)}\\
	H_n&amp;=\cfrac{\dbinom{2n}{n}}{n+1}
\end{aligned}\tag{36}
Hn​Hn​​=(n2n​)−(n−12n​)=n!n!(2n)!​−(n−1)!(n+1)!(2n!)​Let t=(n−1)!=(2n)![n2t21​−n(n+1)t21​]=t2n(2n)!​(n1​−n+11​)=t2n(2n)!​×n(n+1)n+1−n​=t2n2(n+1)(2n)!​=n!n!(n+1)(2n)!​=n+1(n2n​)​​(36)
更进一步，
Hn=(2n)!t2n2(n+1)=(2n−2)!(2n)(2n−1)(n−1)!(n−1)!n2(n+1)=(2n−2n−1)n×2n(2n−1)n(n+1)Hn=Hn−1(4n−2)n+1(37)\begin{aligned}
	H_n&amp;=\cfrac{(2n)!}{t^2n^2(n+1)}\\
	&amp;=\cfrac{(2n-2)!(2n)(2n-1)}{(n-1)!(n-1)!n^2(n+1)}\\
	&amp;=\cfrac{\dbinom{2n-2}{n-1}}{n}\times\cfrac{2n(2n-1)}{n(n+1)}\\
	H_n&amp;=\cfrac{H_{n-1}(4n-2)}{n+1}
\end{aligned}\tag{37}
Hn​Hn​​=t2n2(n+1)(2n)!​=(n−1)!(n−1)!n2(n+1)(2n−2)!(2n)(2n−1)​=n(n−12n−2​)​×n(n+1)2n(2n−1)​=n+1Hn−1​(4n−2)​​(37)
这便是最简单的递推式。至此，所有卡特兰数的公式证毕。
第二类斯特林数
第二类斯特林数，也称斯特林子集数，记做 {nk}\begin{Bmatrix}n\\ k\end{Bmatrix}{nk​}，表示将 nnn 个互不相同的元素，划分为 kkk 个相同的非空子集的方案数。
递推式
{[n=0]k=0{nk}={n−1k−1}+k{n−1k}otherwise(38)\begin{cases}
	[n=0]&amp;k=0\\
	\begin{Bmatrix}n\\ k\end{Bmatrix}=\begin{Bmatrix}n-1\\ k-1\end{Bmatrix}+k\begin{Bmatrix}n-1\\ k\end{Bmatrix}&amp;\text{otherwise}
\end{cases}\tag{38}
⎩⎪⎨⎪⎧​[n=0]{nk​}={n−1k−1​}+k{n−1k​}​k=0otherwise​(38)
可以使用组合意义证明。对于第 nnn 个物品，

若新开一个集合，则方案数为 {n−1k−1}\begin{Bmatrix}n-1\\ k-1\end{Bmatrix}{n−1k−1​}；
若将其放入现有的 kkk 个集合（中的任意一个），方案数为 k{n−1k}k\begin{Bmatrix}n-1\\ k\end{Bmatrix}k{n−1k​}。

通项公式
第一类斯特林数
参考

https://oi-wiki.org/math/combinatorics/combination/
https://www.cnblogs.com/GXZlegend/p/11407185.html

]]></content>
      <tags>
        <tag>Math</tag>
      </tags>
  </entry>
  <entry>
    <title>高中数学</title>
    <url>/hs-math/</url>
    <content><![CDATA[对数
对数是乘方的逆运算，与除是乘的逆运算类似。所以，所有对数的性质及推导过程都可以类比除法。

具体而言：
a+a+⋯+a⏞ba=a×ba=b,a×a×⋯×a⏞log⁡ab=alog⁡ab=b\begin{array}{cc}
	\overbrace{a+a+\cdots+a}^{\frac{b}{a}}=a\times\dfrac{b}{a}=b, &amp; \overbrace{a\times a\times\cdots\times a}^{\log_ab}=a^{\log_ab}=b
\end{array}
a+a+⋯+a​ab​​=a×ab​=b,​a×a×⋯×a​loga​b​=aloga​b=b​
1a(M+N)=1a(a×1aM+a×1aN)log⁡a(M×N)=log⁡a(alog⁡aM×alog⁡aN)=1a(a×(1aM+1aN))=log⁡a(a(log⁡aM+log⁡aN))=1aM+1aN=log⁡aM+log⁡aN\begin{aligned}
	\dfrac{1}{a}(M+N)&amp;=\dfrac{1}{a}\left(a\times\dfrac{1}{a}M+a\times\dfrac{1}{a}N\right)&amp;\log_a(M\times N)&amp;=\log_a{\left(a^{\log_aM}\times a^{\log_aN}\right)}\\
	&amp;=\dfrac{1}{a}\left(a\times\left(\dfrac{1}{a}M+\dfrac{1}{a}N\right)\right)&amp;&amp;=\log_a{\left(a^{\left(\log_aM+\log_aN\right)}\right)}\\
	&amp;=\dfrac{1}{a}M+\dfrac{1}{a}N&amp;&amp;=\log_aM+\log_aN
\end{aligned}
a1​(M+N)​=a1​(a×a1​M+a×a1​N)=a1​(a×(a1​M+a1​N))=a1​M+a1​N​loga​(M×N)​=loga​(aloga​M×aloga​N)=loga​(a(loga​M+loga​N))=loga​M+loga​N​
这里的类比没有那么完美，是因为乘法和乘方的分配律不同：
a×(b+c)=a×b+a×c,ab+c=ab×ac\begin{array}{cc}
	a\times(b+c)=a\times b+a\times c, &amp; a^{b+c}=a^b\times a^c
\end{array}
a×(b+c)=a×b+a×c,​ab+c=ab×ac​
同时注意，乘方不满足交换律，故对数同样不满足交换律。
向量数量积
我们希望定义一个向量之间的运算，使得其只与相对位置有关，且满足分配律。
该运算的引用场景例如计算力做的功。显然通过合力做功或分段做功可以得出分配律。因为空间是均匀的，故无论如何旋转，做的功大小相同，只与相对位置有关。
不妨称其为向量的数量积，记作 a⋅b\boldsymbol{a}\cdot\boldsymbol{b}a⋅b。
先说明其一个重要性质：若 a⊥b\boldsymbol{a}\perp\boldsymbol{b}a⊥b，那么 a⋅b=0\boldsymbol{a}\cdot\boldsymbol{b}=0a⋅b=0。
a⊥b  ⟹  a⊥−b\boldsymbol{a}\perp\boldsymbol{b}\implies\boldsymbol{a}\perp-\boldsymbol{b}a⊥b⟹a⊥−b 故 a⋅b=a⋅−b  ⟹  −(a⋅b)=a⋅b=0\boldsymbol{a}\cdot\boldsymbol{b}=\boldsymbol{a}\cdot-\boldsymbol{b}\implies-(\boldsymbol{a}\cdot\boldsymbol{b})=\boldsymbol{a}\cdot\boldsymbol{b}=0a⋅b=a⋅−b⟹−(a⋅b)=a⋅b=0。
计算 a⋅b\boldsymbol{a}\cdot\boldsymbol{b}a⋅b 时将 a,b\boldsymbol{a},\boldsymbol{b}a,b 正交分解，
a⋅b=(a∥+a⊥)⋅(b∥+b⊥)=a∥b∥+a∥b⊥+a⊥b∥+a⊥b⊥=a∥b∥+a⊥b⊥\begin{aligned}
	\boldsymbol{a}\cdot\boldsymbol{b}&amp;=(\boldsymbol{a}_\parallel+\boldsymbol{a}_\perp)\cdot(\boldsymbol{b}_\parallel+\boldsymbol{b}_\perp)\\
	&amp;=\boldsymbol{a}_\parallel\boldsymbol{b}_\parallel+\boldsymbol{a}_\parallel\boldsymbol{b}_\perp+\boldsymbol{a}_\perp\boldsymbol{b}_\parallel+\boldsymbol{a}_\perp\boldsymbol{b}_\perp\\
	&amp;=\boldsymbol{a}_\parallel\boldsymbol{b}_\parallel+\boldsymbol{a}_\perp\boldsymbol{b}_\perp\\
\end{aligned}
a⋅b​=(a∥​+a⊥​)⋅(b∥​+b⊥​)=a∥​b∥​+a∥​b⊥​+a⊥​b∥​+a⊥​b⊥​=a∥​b∥​+a⊥​b⊥​​
若 a=(xa,ya),b=(xb,yb)\boldsymbol{a}=(x_a,y_a),\boldsymbol{b}=(x_b,y_b)a=(xa​,ya​),b=(xb​,yb​)，则 a⋅b=xaxb+yayb\boldsymbol{a}\cdot\boldsymbol{b}=x_ax_b+y_ay_ba⋅b=xa​xb​+ya​yb​。
同时若以 aaa 为基分解 b=b∥+b⊥b=b_\parallel+b_\perpb=b∥​+b⊥​，则可以得到 a⋅b=∣a∣∣b∣cos⁡⟨a,b⟩\boldsymbol{a}\cdot\boldsymbol{b}=|\boldsymbol{a}||\boldsymbol{b}|\cos\lang\boldsymbol{a},\boldsymbol{b}\ranga⋅b=∣a∣∣b∣cos⟨a,b⟩。
余弦定理
A&lt;------B^   c   ^ \     / b\  a/   \ /    C
c2=(b−a)2c2=b2−2ba+a2∣c∣2=∣a∣2+∣b∣2−2∣a∣∣b∣cos⁡⟨a,b⟩\begin{aligned}
	\boldsymbol{c}^2&amp;=(\boldsymbol{b}-\boldsymbol{a})^2\\
	\boldsymbol{c}^2&amp;=\boldsymbol{b}^2-2\boldsymbol{b}\boldsymbol{a}+\boldsymbol{a}^2\\
	|\boldsymbol{c}|^2&amp;=|\boldsymbol{a}|^2+|\boldsymbol{b}|^2-2|\boldsymbol{a}||\boldsymbol{b}|\cos\lang\boldsymbol{a},\boldsymbol{b}\rang
\end{aligned}
c2c2∣c∣2​=(b−a)2=b2−2ba+a2=∣a∣2+∣b∣2−2∣a∣∣b∣cos⟨a,b⟩​
]]></content>
      <tags>
        <tag>whk</tag>
      </tags>
  </entry>
  <entry>
    <title>高中物理</title>
    <url>/hs-phy/</url>
    <content><![CDATA[运动学
概念
参考系 描述物体运动的参照物。可取任意物体，假定其不动。不同参考系结果可能不同。
质点 代替物体的具有质量的点。理想化物理模型。问题与形状大小有关时不可视为质点。

时间 一段时间。常见表达：第 nnn 秒内、前 nnn 秒。
时刻 一个瞬间。常见表达：第 nnn 秒初 / 末。
位移 物体位置变化，矢量。
路程 物体运动轨迹长度，标量。
标量 只有大小的量。
矢量 有大小和方向的量。
平均速度 物体一段时间内位移与时间长度之比，矢量。
瞬时速度 物体某时刻的速度，矢量。
瞬时速率 瞬时速度的大小，标量。
注意平均速率不是平均速度的大小。
加速度 物体一段时间内速度变化与时间长度之比，矢量。
a=vt−v0t(1)a=\dfrac{v_t-v_0}{t}\tag{1}
a=tvt​−v0​​(1)
上式为平均加速度。
匀变速直线运动
由 (1)(1)(1) 得
vt=v0+at(2)v_t=v_0+at\tag{2}
vt​=v0​+at(2)


根据梯形面积可得
s=12(v0+vt)t(3)s=\dfrac{1}{2}(v_0+v_t)t\tag{3}
s=21​(v0​+vt​)t(3)
将 (2)(2)(2) 带入 (3)(3)(3) 可得
s=vtt+12at2(4)s=v_tt+\dfrac{1}{2}at^2\tag{4}
s=vt​t+21​at2(4)
上式几何意义如下图。


(2),(3)(2),(3)(2),(3) 变形，相乘
(vt−v0)(vt+v0)=at×2st2as=vt2−v02(5)(v_t-v_0)(v_t+v_0)=at\times\dfrac{2s}{t}\\
2as=v_t^2-v_0^2\tag{5}
(vt​−v0​)(vt​+v0​)=at×t2s​2as=vt2​−v02​(5)
匀速圆周运动
线速度
v=stv=\dfrac{s}{t}
v=ts​
角速度
ω=φtv=rω\omega=\dfrac{\varphi}{t}\\
v=r\omega
ω=tφ​v=rω
功能
（机械）功
W=F⋅s=∣F∣∣s∣cos⁡⟨F,s⟩=Fscos⁡αW=\boldsymbol{F}\cdot\boldsymbol{s}=|\boldsymbol{F}||\boldsymbol{s}|\cos\lang\boldsymbol{F},\boldsymbol{s}\rang=Fs\cos\alpha
W=F⋅s=∣F∣∣s∣cos⟨F,s⟩=Fscosα
功率
P=Wt=Fst=FvP=\dfrac{W}{t}=\dfrac{Fs}{t}=Fv
P=tW​=tFs​=Fv
动能
Ek=12mv2E_\mathrm{k}=\dfrac{1}{2}mv^2
Ek​=21​mv2
动能定理
W=Fs=ma×v22−v122a=12mv22−12mv12=Ek2−Ek1W=Fs=ma\times\dfrac{v_2^2-v_1^2}{2a}=\dfrac{1}{2}mv_2^2-\dfrac{1}{2}mv_1^2=E_{\mathrm{k}2}-E_{\mathrm{k}1}
W=Fs=ma×2av22​−v12​​=21​mv22​−21​mv12​=Ek2​−Ek1​
重力势能
Ep=mghE_\mathrm{p}=mgh
Ep​=mgh
机械能守恒定律
E=Ep+EkE=E_\mathrm{p}+E_\mathrm{k}
E=Ep​+Ek​
]]></content>
      <tags>
        <tag>whk</tag>
      </tags>
  </entry>
  <entry>
    <title>最大流与最小割</title>
    <url>/max_flow-min_cut/</url>
    <content><![CDATA[前言
笔者为网络流初学者，可能文章有诸多不足，请指出。
亮点在于 vector 存图、反边作用的解释、代码的注释。
初学者可暂时跳过下面这段“关于 vector 存图”，学完算法在回来看。

关于 vector 存图
很多网上的资料（视频、题解）的最大流算法为了方便找反边，都使用了链式前向星。
但是！
vector 党表示不服！
于是在进行学习后，笔者归纳出了两种 vector 存图并快速找反边的方法。
代码。
存储反边编号
一般 vector 实现邻接表是形如这样的：（在最大流相关算法中）
struct edge&#123;    int v,w;&#125;;vector&lt;edge&gt; e[N];inline void addedge(int u,int v,int w)&#123;    e[u].push_back(&#123;v,w&#125;);    e[v].push_back(&#123;u,0&#125;);&#125;
但是这种存储方法无法快速找到反边。
考虑在结构体 edge 中添加一个信息 x：
struct edge&#123;    int v,w,x;&#125;;
表示反边为 e[v][x]。那么加边时也相应的需要修改：
inline void addedge(int u,int v,int w)&#123;    e[u].push_back(&#123;v,w,int(e[v].size())&#125;);    e[v].push_back(&#123;u,0,int(e[u].size()-1)&#125;);&#125;
这样就可以快速实现找反边操作了。（关于为什么是 int(e[v].size())、int(e[u].size()-1) 请自行思考。）
注意，EK 算法中 int pre[N] 数组则需要改成 pair&lt;int,int&gt; pre[N]，分别表示来自 first 号点和它的 second 号边。
将边存入池子并保存编号
我们可以使用两个 vector 实现更方便的存边方式：
vector&lt;edge&gt; es;vector&lt;int&gt; e[N];
其中 es 存了所有边，e[u] 中存 u 的所有出边在 es 中的编号。
于是，如果我们需要知道边 e[u][i] 的信息，只需要访问 es[e[u][i]]。
而 e[u][i] 的反边即为 e[u][i]^1，与传统链式前向星的访问反边方式类似。
存边时：
e[u].push_back(es.size());es.push_back(&#123;v,ll(w)&#125;);e[v].push_back(es.size());es.push_back(&#123;u,0ll&#125;);

正文开始。
网络流基础知识
以下记 ∣V∣=n,∣E∣=m|V|=n,|E|=m∣V∣=n,∣E∣=m。
网络（network，GGG），即一种特殊的带权有向图 G=(V,E)G=(V,E)G=(V,E)，特别的是，其有特殊的源（source）sss、汇（target）ttt 二点。一般认为 s,ts,ts,t 是固定的两点。
流（flow，fff），为 E→RE\to\Bbb{R}E→R 的函数，其满足 ∀u≠s∧u≠t,∑wf(w,u)=∑vf(u,v)\forall u\ne s\land u\ne t,\sum_{w}f(w,u)=\sum_{v}f(u,v)∀u​=s∧u​=t,∑w​f(w,u)=∑v​f(u,v)，即除 s,ts,ts,t 外的点满足进入 uuu 的流等于出 uuu 的流。如果 (u,v)∉E(u,v)\notin E(u,v)∈/​E 即边 (u,v)(u,v)(u,v) 不存在，我们默认 f(u,v)=0f(u,v)=0f(u,v)=0。（如果一定要较真的话你也可以定义其为 V×V→RV\times V\to\Bbb{R}V×V→R 的函数，然后分类讨论。）
净流量（fff），这里使用了与流同样的记号，为 V→RV\to\Bbb{R}V→R 的函数，定义为 f(u)=∑vf(u,v)−∑wf(w,u)f(u)=\sum_{v}f(u,v)-\sum_{w}f(w,u)f(u)=∑v​f(u,v)−∑w​f(w,u)。容易发现，由于流的性质，除 s,ts,ts,t 外的点的净流量均为 000。由于 sss 流出的量最终必须流向 ttt，故有 f(s)=−f(t)f(s)=-f(t)f(s)=−f(t)
一个流的流量（value，∣f∣|f|∣f∣），定义为 sss 的净流量，即 ∣f∣=f(s)=−f(t)|f|=f(s)=-f(t)∣f∣=f(s)=−f(t)。
容量（capacity，ccc），即普通带权有向图的边权，为 E→R≥0E\to\Bbb{R}_{\ge 0}E→R≥0​ 的函数，一般由题目给出。我们说一个流是合法的当前仅当 ∀e∈E,0≤f(e)≤c(e)\forall e\in E,0\le f(e)\le c(e)∀e∈E,0≤f(e)≤c(e)。若 e∈Ee\in Ee∈E 满足 f(e)=c(e)f(e)=c(e)f(e)=c(e)，我们说它是满流的。同样的，若 e∈Ee\in Ee∈E 满足 f(e)=0f(e)=0f(e)=0，我们说它是空流的。如果 (u,v)∉E(u,v)\notin E(u,v)∈/​E 即边 (u,v)(u,v)(u,v) 不存在，我们定义 c(u,v)=0c(u,v)=0c(u,v)=0。
最大流问题（maximum flow problem），即对于任意合法的流 fff，求出 max⁡∣f∣\max|f|max∣f∣，此时 fff 称为 GGG 的最大流。
割（cut，(S,T)(S,T)(S,T)），是一种点集 VVV 的划分，即 S∪T=V,S∩T=∅S\cup T=V,S\cap T=\varnothingS∪T=V,S∩T=∅ 且满足 s∈S,t∈Ts\in S,t\in Ts∈S,t∈T。
一个割的容量（capacity，∣∣S,T∣∣||S,T||∣∣S,T∣∣），定义为
∣∣S,T∣∣=∑u∈S,v∈Tc(u,v)||S,T||=\sum_{\mathclap{u\in S,v\in T}}c(u,v)
∣∣S,T∣∣=u∈S,v∈T​∑​c(u,v)
即从 S→TS\to TS→T 的连边的容量的和。注意没有 T→ST\to ST→S 的连边！这里我们再次用了“容量（capacity）”这个词，故需区分其与边的容量。
最小割问题（minimum cut problem），即对于任意割 (S,T)(S,T)(S,T)，求出 min⁡∣∣S,T∣∣\min||S,T||min∣∣S,T∣∣，此时 (S,T)(S,T)(S,T) 称为 GGG 的最小割。

以上是冷冰冰的定义，可以直接生硬地理解，也可以用现实中的例子如水流来理解。看上去很长，但这里需要强调定义的重要性。笔者发现，网上资料的许多定义是不正确的。结合证明时，读者往往会不知所措。
如有资料称 fff 为 E→RE\to\Bbb{R}E→R 的函数，却又说“对于每条边 (u,v)(u,v)(u,v)，我们都新建一条反向边 (v,u)(v,u)(v,u)。我们约定 f(u,v)=−f(v,u)f(u,v)=-f(v,u)f(u,v)=−f(v,u)”。明明 (v,u)∉E(v,u)\notin E(v,u)∈/​E，却将 (v,u)(v,u)(v,u) 代入了 fff。那么 (v,u)(v,u)(v,u) 到底在不在 EEE 中？甚至说 “f(v,u)f(v,u)f(v,u) 的绝对值是无关紧要的”，简直胡扯！这样搪塞其词，只会使读者感到困惑。
很多资料并没有考虑 (u,v)(u,v)(u,v)、(v,u)(v,u)(v,u) 均存在于 GGG 中的情况（即 (u,v)∈E∧(v,u)∈E(u,v)\in E\land (v,u)\in E(u,v)∈E∧(v,u)∈E）。这种情况下，再按照上面的“约定”，f(v,u)f(v,u)f(v,u) 的值到底应该是多少？本文中，我们假定没有这种情况，如果有，这种情况也很好处理——建立中继点即可。事实上，代码实现中我们甚至不需要管这种情况，因为对于每条 GGG 上的边，我们都有其专属的反向边。换句话说，实现时可能有两条 (v,u)(v,u)(v,u)，就不存在形式化表达中“到底是那条 (v,u)(v,u)(v,u)”的问题。
Ford–Fulkerson 增广
Ford–Fulkerson 增广是一种计算最大流的策略。该方法运用了带反悔的贪心，通过寻找增广路来更新并求解最大流。对于此策略的正确性，将在下一节“最大流最小割定理”中讲解。
定义
剩余容量（residual capacity，cf(u,v)c_f(u,v)cf​(u,v)），为一个 V×V→RV\times V\to\Bbb{R}V×V→R 的函数，定义为
cf(u,v)={c(u,v)−f(u,v)if (u,v)∈Ef(v,u)if (v,u)∈E0otherwisec_f(u,v)=
\begin{cases}
	c(u,v)-f(u,v)&amp;\text{if $(u,v)\in E$}\\
	f(v,u)&amp;\text{if $(v,u)\in E$}\\
	0&amp;\text{otherwise}
\end{cases}
cf​(u,v)=⎩⎪⎪⎨⎪⎪⎧​c(u,v)−f(u,v)f(v,u)0​if (u,v)∈Eif (v,u)∈Eotherwise​
残量网络（residual graph，GfG_fGf​），定义为 Gf=(V,Ef),Ef={(u,v)∣cf(u,v)&gt;0}G_f=(V,E_f),E_f=\{(u,v)|c_f(u,v)&gt;0\}Gf​=(V,Ef​),Ef​={(u,v)∣cf​(u,v)&gt;0}。即原网络中的点和剩余容量 &gt;0&gt;0&gt;0 的边构成的图。由于反向边的存在，故不满足 Ef⊆EE_f\subseteq EEf​⊆E。
增广路（augmenting path，PPP），为 GfG_fGf​ 上一条 s→ts\to ts→t 的路径，由于该路径上所有边 (u,v)(u,v)(u,v) 的剩余容量 cf(u,v)&gt;0c_f(u,v)&gt;0cf​(u,v)&gt;0，所以这些边都可以增加流量（或退去反向边的流量），即可以进行增广：设 Δ=min⁡(u,v)∈Pcf(u,v)\Delta=\min_{(u,v)\in P}c_f(u,v)Δ=min(u,v)∈P​cf​(u,v)，增广后的流为 f′f&#x27;f′，有
f′(u,v)={f(u,v)+Δif (u,v)∈Pf(u,v)−Δif (v,u)∈P0otherwisef&#x27;(u,v)=
\begin{cases}
	f(u,v)+\Delta&amp;\text{if $(u,v)\in P$}\\
	f(u,v)-\Delta&amp;\text{if $(v,u)\in P$}\\
	0&amp;\text{otherwise}
\end{cases}
f′(u,v)=⎩⎪⎪⎨⎪⎪⎧​f(u,v)+Δf(u,v)−Δ0​if (u,v)∈Pif (v,u)∈Potherwise​
可以证明增广后 f′f&#x27;f′ 也是合法的。同时 ∣f′∣=∣f∣+F&gt;∣f∣|f&#x27;|=|f|+F&gt;|f|∣f′∣=∣f∣+F&gt;∣f∣，故 f′f&#x27;f′ 更优。可以得到，如果在 GfG_fGf​ 上存在 s→ts\to ts→t 的路径，那么 fff 不是最大流。
为什么要使 EfE_fEf​ 中存在反向边？
注意到 Ford–Fulkerson 增广属于贪心，但反向边支持反悔（如果增广 (v,u)(v,u)(v,u)，即减少了 f(u,v)f(u,v)f(u,v)，于是可以做到反悔）。
可以通过以下例子理解：

其中 s=1,t=6s=1,t=6s=1,t=6，所有边的容量均为 111。
假如第一次 bfs 选择了增广路 1→2→4→61\to 2\to 4\to 61→2→4→6，那么如果没有反边，残量网络中 s,ts,ts,t 就不连通了，算法结束，求出的最大流量为 111。
但显然如果增广 1→2→5→6,1→3→4→61\to 2\to 5\to 6,1\to 3\to 4\to 61→2→5→6,1→3→4→6 这两条路，那么最大流量为 222，优于 111。
如果将反边进行操作，增广完 1→2→4→61\to 2\to 4\to 61→2→4→6，cf(2,4)=1−1=0,cf(4,2)=1c_f(2,4)=1-1=0,c_f(4,2)=1cf​(2,4)=1−1=0,cf​(4,2)=1，也就是说，边 (2,4)(2,4)(2,4) 虽然不再在残量网络中，但 (4,2)(4,2)(4,2) 被添加进了残量网络。下一次 bfs 时，就可以通过 1→3→4→2→5→61\to 3\to 4\to 2\to 5\to 61→3→4→2→5→6 进行增广了。这样，(2,4),(4,2)(2,4),(4,2)(2,4),(4,2) 的加流相互抵消，等价于增广 1→2→5→6,1→3→4→61\to 2\to 5\to 6,1\to 3\to 4\to 61→2→5→6,1→3→4→6。
这时可能你心里会想：增广（A）1→2→4→6,1→3→4→2→5→61\to 2\to 4\to 6,1\to 3\to 4\to 2\to 5\to 61→2→4→6,1→3→4→2→5→6 为什么一定等价于增广（B）1→2→5→6,1→3→4→61\to 2\to 5\to 6,1\to 3\to 4\to 61→2→5→6,1→3→4→6？如果边权不一样怎么办？比如如果其他所有边的容量都是 114514114514114514，而 cf(2,4)=1c_f(2,4)=1cf​(2,4)=1，A 的最大流只有 1+1=21+1=21+1=2，而 B 有 114514+114514=229028114514+114514=229028114514+114514=229028 呢！实际上对于这个情况，A 增广后并没有结束，因为 s,ts,ts,t 还连通着。算法会接着增广 B，以达到最大流。
这样就实现了反悔。于是，我们可以一直增广，直到 GfG_fGf​ 中 s,ts,ts,t 不再连通，即没有增广路可以增加流量了，此时 fff 即为该网络的最大流，它是由众多增广出的流叠加而成。
比较抽象，接下来看看算法实现。
EK 算法
EK 算法的本质就是通过在残量网络 GfG_fGf​ 上 bfs 找增广路，进行增广。
算法流程


初始化。
注意，反向边也要存，存图时虽存的是原网络，但边权表示的是 cfc_fcf​ 而非 ccc 或 fff。


bfs 在 GfG_fGf​ 上找增广路。如果 GfG_fGf​ 上存在 s→ts\to ts→t 的路径，则找到了新的增广路。


增广。


重复 bfs、增广，直到 GfG_fGf​ 中 s,ts,ts,t 不再连通，即不存在增广路，此时 EK 算法结束。


可以发现，由于使用的是 bfs，每次增广的增广路都是最短的。
为什么说存的是原网络而非残量网络？
如果要存残量网络，每次增广后需要将 cf(u,v)=0c_f(u,v)=0cf​(u,v)=0 的边 (u,v)(u,v)(u,v) 删掉，太过麻烦。而直接存原网络，bfs 时直接判断 cf(u,v)c_f(u,v)cf​(u,v) 是否 &gt;0&gt;0&gt;0，就知道该边是否在 GfG_fGf​ 中，所以边权维护 cfc_fcf​。
还是不懂可以看代码理解。
代码
题目：P3376 【模板】网络最大流
#include &lt;iostream&gt;#include &lt;vector&gt;#include &lt;bitset&gt;#include &lt;queue&gt;using namespace std;typedef long long ll;typedef pair&lt;int,int&gt; pii;constexpr int N=214;constexpr ll INF=0x3f3f3f3f3f3f3f3f;struct edge&#123;    int v;// 边 (u,v)    ll c;// 准确来说，c_f&#125;;vector&lt;edge&gt; es;// 边集vector&lt;int&gt; e[N];// 存出边int n,m,s,t;namespace EK&#123;    bitset&lt;N&gt; vis;    int pre[N];// 存增广路上的前驱    ll flow[N];// flow[u]：能流到 u 的最大流量    bool bfs()    &#123;        queue&lt;int&gt; q;        vis.reset();        vis[s]=true;        q.push(s);        flow[s]=INF;// 从源点流出的“水量”应是无穷大的，但由于水管不够大，被阻塞        int u,l,v;        ll c;        while(!q.empty())// bfs        &#123;            u=q.front();            q.pop();            l=e[u].size();            for(int i=0;i&lt;l;i++)// 遍历出边            &#123;                v=es[e[u][i]].v;                c=es[e[u][i]].c;                if(!vis[v]&amp;&amp;c&gt;0)// 未遍历过且存在于残量网络中                &#123;                    vis[v]=true;// 标记                    flow[v]=min(flow[u],c);// 取 min                    pre[v]=e[u][i];// 标记前驱                    if(v==t)return true;// 如果搜到 t，则找到增广路，返回                    q.push(v);                &#125;            &#125;        &#125;        return false;// 无增广路    &#125;    ll EK()    &#123;        ll r=0ll;// 初始流量        while(bfs())// 找增广路        &#123;// 如果有增广路            r+=flow[t];// 增加网络流量            for(int i=t;i!=s;i=es[pre[i]^1].v)// 增广路上的每条边            &#123; // 更新 c_f                es[pre[i]].c-=flow[t];// 正边                es[pre[i]^1].c+=flow[t];// 反边            &#125;        &#125;        return r;// 无增广路，算法结束    &#125;&#125;//^ namespace EKint main()&#123;    scanf(&quot;%d %d %d %d&quot;,&amp;n,&amp;m,&amp;s,&amp;t);    for(int i=1,u,v,w;i&lt;=m;i++)    &#123;        scanf(&quot;%d %d %d&quot;,&amp;u,&amp;v,&amp;w);        e[u].push_back(es.size());// 采用类似链式前向星的存边法        es.push_back(&#123;v,ll(w)&#125;);        e[v].push_back(es.size());        es.push_back(&#123;u,0ll&#125;);    &#125;    printf(&quot;%lld&quot;,EK::EK());    return 0;&#125;
时间复杂度
单轮 bfs 增广的时间复杂度是 O(m)O(m)O(m)。
增广总轮数的上界是 O(nm)O(nm)O(nm)。但笔者不会证，干脆不要乱证。OIer 不需要证明。
于是最终时间复杂度为 O(nm2)O(nm^2)O(nm2)。为 O(n5)O(n^5)O(n5) 量级。实际上跑不满，但容易被卡。
Dinic 算法
由于 EK 经常被卡，引出 Dinic 算法。
如何优化 EK
考虑 EK 到底慢在哪。
EK 本质上是一次一次的 bfs 增广，每次只能增广一条最短的增广路。Dinic 使用分层图后，不仅满足增广最短增广路，同时可一次性增广多条增广路。
定义
设 uuu 到 sss 的距离为 d(u)d(u)d(u)，它可以用 bfs 求得。注意这里距离的定义为从 sss 到 uuu 所需要经过的最少边数。
层次图（Level Graph，GLG_LGL​），是在 Gf=(V,Ef)G_f=(V,E_f)Gf​=(V,Ef​) 的基础上，设 EL={(u,v)∣(u,v)∈Ef,d(u)+1=d(v)}E_L=\{(u,v)|(u,v)\in E_f,d(u)+1=d(v)\}EL​={(u,v)∣(u,v)∈Ef​,d(u)+1=d(v)}，那么 GL=(V,EL)G_L=(V,E_L)GL​=(V,EL​)。也就是说，我们从 EfE_fEf​ 中删除了一些边，使经过 uuu 的流量只能流向下一层的结点 vvv。
阻塞流（Blocking Flow，fbf_bfb​），是在当前 GLG_LGL​ 上找到的一个极大的流 fbf_bfb​。
算法流程

在 GfG_fGf​ 上 bfs 出层次图 GLG_LGL​。
在 GLG_LGL​ 上 dfs 出阻塞流 fbf_bfb​。
将 fbf_bfb​ 并到原先的流 fff 中，即 f←f+fbf\gets f+f_bf←f+fb​。
重复以上过程直到不存在从 sss 到 ttt 的路径。

具体如何实现 dfs？
我们可以每次 dfs，一找到一条阻塞流的增广流，就立马回溯，进行增广。同时多次 dfs。
但不必如此。常数优化：只需一次 dfs，找到多个增广路一次性增广阻塞流——多路增广优化。
给出 dfs 实现流程：

从源点开始 dfs，保存当前点编号 uuu、当前流到 uuu 的流大小 flowflowflow。
如果 u=tu=tu=t，即这股阻塞流已经到达了汇点 ttt，返回 flowflowflow。
对于每条出边指向的点 vvv，如果在层次图上存在边 (u,v)(u,v)(u,v)，dfs 出 vvv 的阻塞流 nownownow。
如果 now=0now=0now=0，说明 vvv 无法增广，将 d(v)←0d(v)\gets 0d(v)←0，弃置——无用点优化。
现场增广，更新当前点 uuu 的最大流 res←res+now,flow←flow−nowres\gets res+now,flow\gets flow-nowres←res+now,flow←flow−now，更新 cf(u,v)←cf(u,v)−now,cf(v,u)←cf(v,u)+nowc_f(u,v)\gets c_f(u,v)-now,c_f(v,u)\gets c_f(v,u)+nowcf​(u,v)←cf​(u,v)−now,cf​(v,u)←cf​(v,u)+now。
返回 resresres。

由于不是 DAG，dfs 可能多次遍历某个点 uuu，每次由入边流入流量时 uuu 都需要遍历每个出边进行流量的传递，这一过程可能达到 O(m2)O(m^2)O(m2)。
所以，如果某条出边已无法接受更多流量（(u,v)(u,v)(u,v) 无剩余容量或 vvv 的后侧已阻塞），那么我们下一次遍历 uuu 时就可以跳过 (u,v)(u,v)(u,v)。
于是对于每个点 uuu，维护其出边中第一条可尝试的出边。这条边叫当前弧，该做法叫当前弧优化。（其实和欧拉回路很像。）
以上可能讲得不清楚，可参考代码。
代码
#include &lt;iostream&gt;#include &lt;vector&gt;#include &lt;queue&gt;using namespace std;typedef long long ll;typedef pair&lt;int,int&gt; pii;constexpr int N=214;constexpr ll INF=0x3f3f3f3f3f3f3f3f;struct edge&#123;    int v;    ll c;&#125;;vector&lt;edge&gt; es;// 存图方式同 EKvector&lt;int&gt; e[N];int n,m,s,t;namespace Dinic&#123;    int dis[N],fir[N];// dis[u]：s-&gt;u 最短距离，fir[u]：u 的出边中第一个有意义的点，即当前弧    bool bfs()    &#123;        fill(fir,fir+N,0);// 清空        fill(dis,dis+N,0);        dis[s]=1;        queue&lt;int&gt; q;        q.push(s);        int u,l,v;        while(!q.empty())// bfs        &#123;            u=q.front();            q.pop();            l=e[u].size();            for(int i=0;i&lt;l;i++)            &#123;                v=es[e[u][i]].v;                if(!dis[v]&amp;&amp;es[e[u][i]].c&gt;0ll)// 若未遍历过且有剩余容量                &#123;                    dis[v]=dis[u]+1;// 标记                    q.push(v);                    if(v==t)return true;// 若找到 t，返回                &#125;            &#125;        &#125;        return false;// 若无阻塞流，返回    &#125;    ll dfs(int u=s,ll flow=INF)// flow：可以流进当前点的流量    &#123;// 注意，这里的 dfs 不像其他 dfs，可能重复访问一个点        if(u==t)return flow;// 找到 t，返回流到 t 的流量        int l=e[u].size(),v;        ll res=0ll,now,c;        for(int i=fir[u];i&lt;l;i++)// 从第一个有必要尝试的点开始        &#123;            fir[u]=i;// 当前弧优化：维护当前弧指针，注意它只对本轮 dfs 有效，bfs 会清除 fir 数组            v=es[e[u][i]].v;            c=es[e[u][i]].c;            if(dis[v]==dis[u]+1&amp;&amp;c&gt;0ll)// 如果在 G_L 上且有剩余容量            &#123;                now=dfs(v,min(flow,c));// dfs 出 v 能流到 t 的阻塞流                if(now==0ll)dis[v]=0;// 无用点优化：如果已经不能增广 v，则丢弃 v，这样下一次访问 u 并遍历出边时就会忽略 v                es[e[u][i]].c-=now;// 现场增流                es[e[u][i]^1].c+=now;                res+=now;// 更新当前点能流出的最大阻塞流                flow-=now;// 任务减轻                if(flow==0ll)return res;// 当前弧优化：如果任务完成，直接 return，非常重要！！！                // 如果没有上面这一句，Dinic 的复杂度将无法保证，甚至在洛谷模板题上比 EK 跑得还慢！！！                // 因为不 return 会继续遍历所有出边，但参数 flow=0，没有任何用处，浪费时间。            &#125;        &#125;        return res;    &#125;    ll Dinic()    &#123;        ll r=0ll;        while(bfs())r+=dfs();        return r;    &#125;&#125;//^ namespace Dinicint main()&#123;    scanf(&quot;%d %d %d %d&quot;,&amp;n,&amp;m,&amp;s,&amp;t);    for(int i=1,u,v,w;i&lt;=m;i++)    &#123;        scanf(&quot;%d %d %d&quot;,&amp;u,&amp;v,&amp;w);        e[u].push_back(es.size());        es.push_back(&#123;v,ll(w)&#125;);        e[v].push_back(es.size());        es.push_back(&#123;u,0ll&#125;);    &#125;    printf(&quot;%lld&quot;,Dinic::Dinic());    return 0;&#125;
时间复杂度
单轮 dfs 增广的时间复杂度是 O(nm)O(nm)O(nm)，增广总轮数的上界是 O(n)O(n)O(n)，于是最终时间复杂度为 O(n2m)O(n^2m)O(n2m)。
为 O(n4)O(n^4)O(n4) 量级。实际上也跑不满，但据说不卡 Dinic 是所有出题人的共识（惯例）。
称边权为 0,10,10,1 的图为单位容量的。

在单位容量的网络中，Dinic 算法的单轮增广的时间复杂度为 O(m)O(m)O(m)。
在单位容量的网络中，Dinic 算法的增广轮数是 O(m)O(\sqrt{m})O(m​) 的。
在单位容量的网络中，Dinic 算法的增广轮数是 O(n2/3)O(n^{2/3})O(n2/3) 的。

于是单位容量的网中网络流的复杂度为：O(mmin⁡(m,n2/3))O(m\min(\sqrt{m}, n^{2/3}))O(mmin(m​,n2/3))，二分图匹配就可以做到这个复杂度。
正确性

每次建立层次图后都可以进行多次增广，无法增广时重新建立层次图，此时的层次图不再包含之前进行增广后满载的边。无法建立层次图时，说明源点到汇点的任意一条简单路径中，都至少有一条边满载，这也在直观上验证了最小割最大流定理。

最大流最小割定理
对于网络 G=(V,E)G=(V,E)G=(V,E)，源点 sss，汇点 ttt，有以下三个条件互相等价：

fff 为最大流
残量网络 GfG_fGf​ 上不存在增广路
存在割 (S,T)(S,T)(S,T) 使得 ∣∣S,T∣∣=∣f∣||S,T||=|f|∣∣S,T∣∣=∣f∣

引理
先从一个引理开始：∣f∣≤∣∣S,T∣∣|f|\le||S,T||∣f∣≤∣∣S,T∣∣。
也就是说任意一个流的流量都不会大于任意一个割的容量。进一步地，就是最大流流量不大于最小割容量。
设 u∈S,v∈Tu\in S,v\in Tu∈S,v∈T。因为流从 SSS 中的点流到 TTT 中，必须跨过一条 (u,v)(u,v)(u,v) 边。即使 (u,v)(u,v)(u,v) 均满流，即 f(u,v)=c(u,v)f(u,v)=c(u,v)f(u,v)=c(u,v)，也只有 ∣f∣=∣∣S,T∣∣|f|=||S,T||∣f∣=∣∣S,T∣∣。此时所有从 SSS 到 TTT 的边都已满流，无法再增加流量，所以有 ∣f∣≤∣∣S,T∣∣|f|\le||S,T||∣f∣≤∣∣S,T∣∣。
形式化的证明：
∣f∣=f(s)基本性质=∑u∈Sf(u)所有 u∈S,u≠s 均满足 f(u)=0=∑u∈S(∑v∈Vf(u,v)−∑v∈Vf(v,u))净流量 f(u) 的定义：出量−入量=∑u∈S(∑v∈Tf(u,v)+∑v∈Sf(u,v)−∑v∈Tf(v,u)−∑v∈Sf(v,u))将 v∈V 分类讨论：v∈S,v∈T=∑u∈S(∑v∈Tf(u,v)−∑v∈Tf(v,u))+∑u∈S∑v∈Sf(u,v)−∑u∈S∑v∈Sf(v,u)分离=∑u∈S(∑v∈Tf(u,v)−∑v∈Tf(v,u))抵消的两式是互相等价的≤∑u∈S∑v∈Tf(u,v)f(v,u)≥0≤∑u∈S∑v∈Tc(u,v)f(u,v)≤c(u,v)=∣∣S,T∣∣定义\footnotesize
\begin{aligned}
|f|&amp;=f(s)&amp;\text{基本性质}\\
&amp;=\sum_{u\in S}f(u)&amp;\text{所有 $u\in S,u\ne s$ 均满足 $f(u)$=0}\\
&amp;=\sum_{u\in S}\left(\sum_{v\in V}f(u,v)-\sum_{v\in V}f(v,u)\right)&amp;\text{净流量 $f(u)$ 的定义：出量$-$入量}\\
&amp;=\sum_{u\in S}\left(\sum_{v\in T}f(u,v)+\sum_{v\in S}f(u,v)-\sum_{v\in T}f(v,u)-\sum_{v\in S}f(v,u)\right)&amp;\text{将 $v\in V$ 分类讨论：$v\in S,v\in T$}\\
&amp;=\sum_{u\in S}\left(\sum_{v\in T}f(u,v)-\sum_{v\in T}f(v,u)\right)+\sum_{u\in S}\sum_{v\in S}f(u,v)-\sum_{u\in S}\sum_{v\in S}f(v,u)&amp;\text{分离}\\
&amp;=\sum_{u\in S}\left(\sum_{v\in T}f(u,v)-\sum_{v\in T}f(v,u)\right)&amp;\text{抵消的两式是互相等价的}\\
&amp;\le\sum_{u\in S}\sum_{v\in T}f(u,v)&amp;f(v,u)\ge 0\\
&amp;\le\sum_{u\in S}\sum_{v\in T}c(u,v)&amp;f(u,v)\le c(u,v)\\
&amp;=||S,T||&amp;\text{定义}\\
\end{aligned}
∣f∣​=f(s)=u∈S∑​f(u)=u∈S∑​(v∈V∑​f(u,v)−v∈V∑​f(v,u))=u∈S∑​(v∈T∑​f(u,v)+v∈S∑​f(u,v)−v∈T∑​f(v,u)−v∈S∑​f(v,u))=u∈S∑​(v∈T∑​f(u,v)−v∈T∑​f(v,u))+u∈S∑​v∈S∑​f(u,v)−u∈S∑​v∈S∑​f(v,u)=u∈S∑​(v∈T∑​f(u,v)−v∈T∑​f(v,u))≤u∈S∑​v∈T∑​f(u,v)≤u∈S∑​v∈T∑​c(u,v)=∣∣S,T∣∣​基本性质所有 u∈S,u​=s 均满足 f(u)=0净流量 f(u) 的定义：出量−入量将 v∈V 分类讨论：v∈S,v∈T分离抵消的两式是互相等价的f(v,u)≥0f(u,v)≤c(u,v)定义​
对于第一个不等号，取等需要满足 ∀u∈S,v∈T,f(v,u)=0\forall u\in S,v\in T,f(v,u)=0∀u∈S,v∈T,f(v,u)=0，即 (v,u)(v,u)(v,u) 均空流。
对于第二个不等号，取等需要满足 ∀u∈S,v∈T,f(u,v)=c(u,v)\forall u\in S,v\in T,f(u,v)=c(u,v)∀u∈S,v∈T,f(u,v)=c(u,v)，即 (u,v)(u,v)(u,v) 均满流。
定理证明
1  ⟹  21\implies 21⟹2
因为若残量网络 GfG_fGf​ 上存在增广路，必然可以对其增广，使流量更大，与条件“fff 为最大流”矛盾。
2  ⟹  32\implies 32⟹3
设 SSS 为所有从 sss 出发能到达的点，T=V−ST=V-ST=V−S，则


对于 u∈S,v∈Tu\in S,v\in Tu∈S,v∈T，所有边 (u,v)(u,v)(u,v) 均满流。分类讨论：
否则其剩余容量 cf(u,v)=c(u,v)−f(u,v)&gt;0c_f(u,v)=c(u,v)-f(u,v)&gt;0cf​(u,v)=c(u,v)−f(u,v)&gt;0，有 (u,v)(u,v)(u,v) 在 GfG_fGf​ 上，可以从 s→u→vs\to u\to vs→u→v，与 v∈Tv\in Tv∈T 矛盾。


同样的，对于 u∈S,v∈Tu\in S,v\in Tu∈S,v∈T，所有边 (v,u)(v,u)(v,u) 均空流。
否则其反向边 (u,v)(u,v)(u,v) 的剩余容量 cf(u,v)=f(v,u)&gt;0c_f(u,v)=f(v,u)&gt;0cf​(u,v)=f(v,u)&gt;0，有 (u,v)(u,v)(u,v) 在 GfG_fGf​ 上，可以从 s→u→vs\to u\to vs→u→v，与 v∈Tv\in Tv∈T 矛盾。


以上证明假定 (u,v)∈E(u,v)\in E(u,v)∈E 和 (v,u)∈E(v,u)\in E(v,u)∈E。如果不满足此条件，则由定义默认 f(u,v)=c(u,v)=0f(u,v)=c(u,v)=0f(u,v)=c(u,v)=0、f(v,u)=c(v,u)=0f(v,u)=c(v,u)=0f(v,u)=c(v,u)=0，定理也是对的。而一种更 不 优美的方式是，
cf(u,v)=(c(u,v)−f(u,v))+f(v,u)+0=0c_f(u,v)={\color{red}\Big(c(u,v)-f(u,v)\Big)}+{\color{blue}f(v,u)}+{\color{green}0}=0
cf​(u,v)=(c(u,v)−f(u,v))+f(v,u)+0=0
我们将 cf(u,v)c_f(u,v)cf​(u,v) 定义中的三种可能相加。不管 (u,v)∈E(u,v)\in E(u,v)∈E、(v,u)∈E(v,u)\in E(v,u)∈E、otherwise\text{otherwise}otherwise，可以发现 除了满足的条件所对应的那一项，另外的两项均为 000。也就是说，上式符合定义。又由于 c(u,v)−f(u,v)≥0,f(v,u)≥0c(u,v)-f(u,v)\ge 0,f(v,u)\ge 0c(u,v)−f(u,v)≥0,f(v,u)≥0，故 c(u,v)−f(u,v)=0,f(v,u)=0c(u,v)-f(u,v)=0,f(v,u)=0c(u,v)−f(u,v)=0,f(v,u)=0。
所以不管怎么说，我们证明了引理中的取等条件，有我们构造的割 (S,T)(S,T)(S,T) 满足 ∣f∣=∣∣S,T∣∣|f|=||S,T||∣f∣=∣∣S,T∣∣。
3  ⟹  13\implies 13⟹1
由于对于所有流 fff、割 (S,T)(S,T)(S,T) 都有 ∣f∣≤∣∣S,T∣∣|f|\le ||S,T||∣f∣≤∣∣S,T∣∣，故取等时 fff 为最大流，(S,T)(S,T)(S,T) 为最小割。
换句话说，若存在流 f′f&#x27;f′ 满足比 fff 流量更大，则 ∣f′∣&gt;∣f∣=∣∣S,T∣∣|f&#x27;|&gt;|f|=||S,T||∣f′∣&gt;∣f∣=∣∣S,T∣∣，与引理 ∣f′∣≤∣∣S,T∣∣|f&#x27;|\le ||S,T||∣f′∣≤∣∣S,T∣∣ 矛盾。故不存在 f′f&#x27;f′，即 fff 为最大流。(S,T)(S,T)(S,T) 为最小割同样可以用这种反证法证明。
□\square□
定理应用
那么这个定理有什么用？

Ford-Fulkerson 增广结束时，所得 fff 为最大流，即证明了该算法正确性；
同时，证明了最大流流量等于最小割容量，即 max⁡∣f∣=min⁡∣∣S,T∣∣\max |f|=\min ||S,T||max∣f∣=min∣∣S,T∣∣；
可得，我们同样可以使用 Ford-Fulkerson 求出最小割。

事实上，最大流最小割本质上是线性规划对偶。
费用流
定义
一条边单位流量的 费用（w(u,v)w(u,v)w(u,v)） 为一个 V×V→RV\times V\to\Bbb{R}V×V→R 的函数，表示边 (u,v)(u,v)(u,v) 流过 f(u,v)f(u,v)f(u,v) 的流量需要花费 f(u,v)×w(u,v)f(u,v)\times w(u,v)f(u,v)×w(u,v) 的费用。
最小费用最大流问题，即在最大流的前提下最小化每条边的费用之和 ∑(u,v)∈Ef(u,v)×w(u,v)\sum_{(u,v)\in E}f(u,v)\times w(u,v)∑(u,v)∈E​f(u,v)×w(u,v)。
SSP 算法
SSP 算法（Successive Shortest Path Algorithm），即每次寻找费用和最小的增广路进行增广，也就是将最大流算法中的 bfs 改成了最短路算法。一般使用 EK + 队列优化 Bellman-Ford 实现。使用 Dinic 复杂度没有优化。
费用存在负环时 SSP 算法无法正确求解最小费用最大流问题，这种情况做题时一般也不会出现，这里先不讲，以后有时间再补解决方法。
代码
类似的，我们可以写出 SSP 算法的代码。
#include &lt;iostream&gt;#include &lt;vector&gt;#include &lt;algorithm&gt;#include &lt;queue&gt;#include &lt;bitset&gt;using std::cin;typedef long long ll;constexpr int N=5e3+1145,INF=0x3f3f3f3f;namespace ssp&#123;    int n,s,t;    struct edge&#123;int v,w,c;&#125;;    std::vector&lt;int&gt; e[N];    std::vector&lt;edge&gt; es;    inline void add(int u,int v,int w,int c)    &#123;        e[u].push_back(es.size());        es.push_back(&#123;v,w,c&#125;);        e[v].push_back(es.size());        es.push_back(&#123;u,0,-c&#125;);    &#125;    int dis[N],flow[N],pre[N];    std::bitset&lt;N&gt; inq;    bool exbf() // 队列优化 Bellman-Ford    &#123;        std::fill(dis,dis+n+1,INF);        dis[s]=0;        flow[s]=INF;        flow[t]=0;        std::queue&lt;int&gt; q;        q.push(s);        int u,v,w,c;        while(!q.empty())        &#123;            u=q.front(),q.pop();            inq[u]=false;            for(int i=0;i&lt;int(e[u].size());i++)            &#123;                v=es[e[u][i]].v,w=es[e[u][i]].w,c=es[e[u][i]].c;                if(w&amp;&amp;dis[v]&gt;dis[u]+c)                &#123;                    dis[v]=dis[u]+c;                    flow[v]=std::min(w,flow[u]);                    pre[v]=e[u][i];                    if(!inq[v])q.push(v),inq[v]=true;                &#125;            &#125;        &#125;        return flow[t];    &#125;    int maxflow,mincost;    void main() // EK    &#123;        while(exbf())        &#123;            maxflow+=flow[t];            for(int u=t;u!=s;u=es[pre[u]^1].v)            &#123;                es[pre[u]].w-=flow[t],es[pre[u]^1].w+=flow[t];                mincost+=es[pre[u]].c*flow[t];            &#125;        &#125;    &#125;&#125; // namespace sspint main()&#123;    std::ios::sync_with_stdio(false);    cin.tie(nullptr);    int m;    cin&gt;&gt;ssp::n&gt;&gt;m&gt;&gt;ssp::s&gt;&gt;ssp::t;    for(int i=1,u,v,w,c;i&lt;=m;i++)    &#123;        cin&gt;&gt;u&gt;&gt;v&gt;&gt;w&gt;&gt;c;        ssp::add(u,v,w,c);    &#125;    ssp::main();    printf(&quot;%d %d&quot;,ssp::maxflow,ssp::mincost);    return 0;&#125;
应用
二分图
最大匹配
P3386 【模板】二分图最大匹配
考虑建立最大流模型。
建立超级汇点 sss 连向所有左部点 u∈V0u\in V_0u∈V0​，所有右部点 v∈V1v\in V_1v∈V1​ 连向超级汇点 ttt。
上述边和原二分图中的边（只从左部连向右部）的容量均为 111。直接跑 Dinic 即可。
最小点覆盖 &amp; 最大独立集
后记——拓展阅读

[教程]网络流详解: 从入门到放弃
Algorithms by Jeff Erickson

]]></content>
      <tags>
        <tag>Algorithms</tag>
      </tags>
  </entry>
  <entry>
    <title>莫队</title>
    <url>/mt/</url>
    <content><![CDATA[前言

这是一篇 LaTeX\LaTeXLATE​X PPT 改 md。

今天的题单：点我。
今天是我第一次上台，PPT 可能不是那么美观， 如果有错误请大胆指出。
例题不会很难，请放心食用。

简介
莫队简介
什么是莫队？
莫队是由莫涛大神提出的一种暴力区间操作算法，它框架简单、板子好写、复杂度优秀。
然而由于莫队算法应用的毒瘤，很多莫队题难度评级都很高（蓝紫黑），令很多初学者望而却步。但如果你真正理解了莫队的算法原理，它用起来还是挺简单的。
前置知识：

分块思想。
sort 的用法（包括重载运算符或 cmp 函数，多关键字排序）。

使用莫队的情境
若 m=O(n)m=O(n)m=O(n)（即 mmm、nnn 同阶），且 [l,r][l,r][l,r] 的答案能 O(1)O(1)O(1) 地转换到 [l−1,r],[l,r+1],[l+1,r],[l,r−1][l-1,r],[l,r+1],[l+1,r],[l,r-1][l−1,r],[l,r+1],[l+1,r],[l,r−1] 区间（即相邻区间）的答案，那么莫队可以在 O(nn)O(n\sqrt{n})O(nn​) 的时间复杂度内离线求出所有询问的答案。
注意：莫队是离线算法。如果题目强制在线，则不以可用莫队。
什么是离线、在线？

如果算法需要知道所有询问才能开始算法，则称此算法为离线算法。
读入一个询问，回答一个询问的算法叫在线算法。
强制在线就是要求你读入一个询问就立马回答。

莫队的基本思想
离线存下所有询问，借助分块按照一定的顺序处理这些询问，使得询问之间可以互相利用（一般情况下为了方便，只会是本次询问利用上次询问的答案），以减小时间复杂度。
普通莫队
算法基础
算法流程

离线存下所有询问。
以二元组 (bel[li],ri)(bel[l_i],r_i)(bel[li​],ri​) 为关键字升序对所有询问排序。
其中 iii 表示当前询问编号，bel[li]bel[l_i]bel[li​]（belong，属于）表示 lil_ili​ 所在的块的编号。
遍历每个询问，维护两个指针 [l,r][l,r][l,r] 表示当前区间，nownownow 表示当前答案。
初始时 l=1,r=0l=1,r=0l=1,r=0（如果 l=0l=0l=0，那么我们还需要删除 a0a_0a0​，导致一些奇怪的错误）。
l,rl,rl,r 需区别于 li,ril_i,r_ili​,ri​，它们一对是我们维护的指针（下标），一对是数据给出的询问。
移动区间 [l,r]→[li,ri][l,r]\to [l_i,r_i][l,r]→[li​,ri​]。途中维护区间 [l,r][l,r][l,r] 的答案 nownownow。
移动结束后，记录区间 [li,ri][l_i,r_i][li​,ri​] 的答案 ansians_iansi​。（ansi←nowans_i\gets nowansi​←now）。

算法代码：洛谷 P3901 数列找不同（模板题）
constexpr int N=114514;int n,m,a[N],S;// S：块长// [1,S] 区间的块编号为 1，[S+1,2S] 区间的块编号为 2，以此类推。inline int bel(int x)&#123;return (x-1)/S+1;&#125;struct query// 询问结构体&#123;    int l,r,id;// 分别为每个询问区间的左端点、右端点、询问的编号。    friend inline bool operator &lt; (query x,query y)    &#123;return (bel(x.l)==bel(y.l)?x.r&lt;y.r:bel(x.l)&lt;bel(y.l));&#125;&#125;;query q[N];// 查询数组bitset&lt;N&gt; ans;// 答案数组// cnt[i]：i 这个数在当前区间 [l,r] 出现次数，cf：重复出现的数的数量。// 如果 cf=0，[l,r] 中没有重复出现的数。int cnt[N],cf=0;// 移动区间inline void add(int pos)// 添加 a[pos]&#123;    cnt[a[pos]]++;// 将 a[pos] 的出现次数 +1。    if(cnt[a[pos]]==2)cf++;// 如果已经出现两次，则重复了，cf++。&#125;inline void del(int pos)// 删除 a[pos]&#123;    cnt[a[pos]]--;// 将 a[pos] 的出现次数 -1。    if(cnt[a[pos]]==1)cf--;// 如果当前只出现一次，则之前一定重复（出现两次），    // 而现在不重复了，cf--。&#125;void mt()&#123;    S=int(ceil(pow(n,0.5)));// S=sqrt(n)，根号分块    sort(q+1,q+m+1);// 结构体排序    for(int i=1,l=1,r=0;i&lt;=m;i++)// 遍历每个询问    &#123;        #define q q[i]// 偷懒        while(q.l&lt;l)add(--l);// 向左扩展 l-1        while(r&lt;q.r)add(++r);// 向右扩展 r+1        while(l&lt;q.l)del(l++);// 向右删除 l        while(q.r&lt;r)del(r--);// 向左删除 r        // 注意上面四句的顺序，需要先扩展在删除。        // 同时注意自减自加运算符是前置还是后置。        ans[q.id]=!cf;// 记录当前答案        #undef q    &#125;&#125;int main()&#123;    // input    mt();// 莫队    for(int i=1;i&lt;=m;i++)puts(ans[i]?&quot;Yes&quot;:&quot;No&quot;);// 输出    return 0;&#125;
算法复杂度
下面的讨论中 m=O(n)m=O(n)m=O(n)。
单次移动 l,rl,rl,r 中的一个复杂度显然 O(1)O(1)O(1)。
考虑 l,rl,rl,r 分别移动的次数。

考虑 lll：设块 iii 内的询问的左端点个数为 xix_ixi​，则块 iii 中移动 lll 的次数顶多 xi×nx_i\times\sqrt{n}xi​×n​。一共 n\sqrt{n}n​ 个块，移动 lll 的总时间复杂度为：

∑i=1n(xi×n)=(n)×∑i=1n(xi)=n×m=O(nn)\begin{aligned}
	&amp;\sum_{i=1}^{\sqrt{n}} \left(x_i\times\sqrt{n}\right)\\
	=&amp;\left(\sqrt{n}\right)\times\sum_{i=1}^{\sqrt{n}} \left(x_i\right)\\
	=&amp;\sqrt{n}\times m\\
	=&amp;O(n\sqrt{n})
\end{aligned}===​i=1∑n​​(xi​×n​)(n​)×i=1∑n​​(xi​)n​×mO(nn​)​

考虑 rrr：每块内的 xix_ixi​ 个 lj(1≤j≤xi)l_j(1\le j\le x_i)lj​(1≤j≤xi​) 肯定一一对应着 xix_ixi​ 个 rjr_jrj​。
显然这 xix_ixi​ 个 rjr_jrj​ 最多会使 rrr 移动 nnn 的长度（ljl_jlj​ 同一块时，按 rjr_jrj​ 升序，故不降）。
一共 n\sqrt{n}n​ 个块，移动 rrr 的总时间复杂度为：n×n=O(nn)\sqrt{n}\times n=O(n\sqrt{n})n​×n=O(nn​)。
则总时间复杂度为 O(1)×[O(nn)+O(nn)]=O(nn)O(1)\times [O(n\sqrt{n})+O(n\sqrt{n})]=O(n\sqrt{n})O(1)×[O(nn​)+O(nn​)]=O(nn​)。

算法优化
奇偶性排序
刚才的复杂度分析中提出了一些极端情况：xix_ixi​ 个 rjr_jrj​ 最多使 rrr 移动 nnn 的长度。
而 n\sqrt{n}n​ 个块都可能使 rrr 移动 nnn 的长度，例如下列询问（n=100,S=10n=100,S=10n=100,S=10）：
1 110 10011 120 100
按原先的排序策略，rrr 需要反复横跳，十分浪费时间。
如果将处理顺序改为以下顺序将大大加速：
1 110 10020 10011 1
怎么修改排序策略？
依然以 bel[li]bel[l_i]bel[li​] 为第一关键字升序排序，若 bel[li]bel[l_i]bel[li​] 为奇数，以 rir_iri​ 为第二关键字升序排序，反之若 bel[li]bel[l_i]bel[li​] 为偶数，以 rir_iri​ 为第二关键字降序排序。

这样我们的 rrr 指针在处理完这个奇数块的问题后，将在返回的途中处理偶数块的问题，再向 nnn 移动处理下一个奇数块的问题，优化了 rrr 指针的移动次数，一般情况下，这种优化能让程序快 30%30\%30% 左右。
——OI-Wiki。

实测：810810810 ms →\to→ 622622622 ms，快约 23.2%23.2\%23.2%。
奇偶性排序：代码
struct query&#123;    int l,r,id;    friend inline bool operator &lt; (query x,query y)    &#123;        if(bel(x.l)!=bel(y.l))return bel(x.l)&lt;bel(y.l);        if(bel(x.l)&amp;1)return x.r&lt;y.r;        else return x.r&gt;y.r;    &#125;&#125;;
坑点：注意重载运算符不能出现 a&lt;b,a&gt;ba&lt;b,a&gt;ba&lt;b,a&gt;b 同时为真的情况，否则会 RE。如以下实现方式就是错误的：
struct query&#123;    int l,r,id;    friend inline bool operator &lt; (query x,query y)    &#123;        if(bel(x.l)!=bel(y.l))return bel(x.l)&lt;bel(y.l);        return (bel(x.l)&amp;1)==(x.r&lt;y.r);// 这里会出错    &#125;&#125;;
常数级展开
发现 add()，del() 两个函数可以压行并展开到 mt() 中。
这看似鸡肋的优化实测 572572572 ms——又优化了 505050 ms。
代码：
void mt()&#123;    S=int(ceil(pow(n,0.5)));    sort(q+1,q+m+1);    for(int i=1,l=1,r=0;i&lt;=m;i++)    &#123;        #define q q[i]        // 压行并展开：        while(q.l&lt;l)cf+=(++cnt[a[--l]]==2);// 与 add(--l) 等价        while(r&lt;q.r)cf+=(++cnt[a[++r]]==2);// 与 add(++r) 等价        while(l&lt;q.l)cf-=(--cnt[a[l++]]==1);// 与 del(l++) 等价        while(q.r&lt;r)cf-=(--cnt[a[r--]]==1);// 与 del(r--) 等价        ans[q.id]=!cf;        #undef q    &#125;&#125;
玄学剪枝
我考虑到有时候可能转移大半天还不如暴力重新算，所以想出了一个玄学剪枝：
// 如果转移代价大于重新算的代价if(abs(q.l-l)+abs(q.r-r)&gt;(r-l+1)+(q.r-q.l+1))&#123;    while(l&lt;=r)cf-=(--cnt[a[r--]]==1);// 清除    r=(l=q.l)-1;// 直接跳转&#125;
（这段语句加在 #define q q[i] 后面。）
没想到只优化了 111 ms（悲。也许是每次都判断的代价太大，抵消了直接跳转的优化。
预处理 belbelbel
我写好几题才发现其他大佬都预处理了 belbelbel，于是赶紧改过来。快了 585858 ms。
int S;int bel[N];inline void initbel()// 1~S: 1&#123;    S=int(ceil(pow(n,0.5)));// S=sqrt(n)    for(int i=1;i&lt;=n;i++)bel[i]=(i-1)/S+1;&#125;...void mt()&#123;    initbel();    sort(q+1,q+m+1);    ...&#125;
例题
例题：DQUERY - D-query
简要题意：给出一个长度为 nnn 的数列 aaa，mmm 个询问，每次询问给出数对 l,rl,rl,r 表示查询区间 [l,r][l,r][l,r] 中有多少不同的数。
数据范围：n≤3×105,m≤2×105,ai≤106n\le 3\times10^5,m\le2\times10^5,a_i\le10^6n≤3×105,m≤2×105,ai​≤106。
板子题，难度在于如何 O(1)O(1)O(1) 转移答案。
考虑用数组 cnticnt_icnti​ 表示 [l,r][l,r][l,r] 中 iii 出现了几次，变量 nownownow 表示 [l,r][l,r][l,r] 中有多少不同的数。
要添加 aposa_{pos}apos​，那么 cnt[apos]←cnt[apos]+1cnt[a_{pos}]\gets cnt[a_{pos}]+1cnt[apos​]←cnt[apos​]+1。
此时若 cnt[apos]=1cnt[a_{pos}]=1cnt[apos​]=1，即多了一个不同的数，那么 now←now+1now\gets now+1now←now+1。
同理删除 aposa_{pos}apos​ 时 cnt[apos]←cnt[apos]−1cnt[a_{pos}]\gets cnt[a_{pos}]-1cnt[apos​]←cnt[apos​]−1，若 cnt[apos]=0cnt[a_{pos}]=0cnt[apos​]=0（少了一个数），now←now−1now\gets now-1now←now−1。
其他的正常地跑莫队即可。但此题似乎卡常。
例题：P2709 小B的询问
简要题意：给出一个长度为 nnn 的数列 aaa（值域 [1,k][1,k][1,k]），mmm 个询问，每次询问给出数对 l,rl,rl,r 表示查询：
∑i=1kci2\sum\limits_{i=1}^k c_i^2
i=1∑k​ci2​
其中 cic_ici​ 表示数字 iii 在 [l,r][l,r][l,r] 中的出现次数。
数据范围：1≤n,m,k≤5×1041\le n,m,k \le 5\times 10^41≤n,m,k≤5×104。
难度依然在于如何 O(1)O(1)O(1) 转移答案。
ccc 数组很好维护，但答案（设它为 sss）就不那么好维护了。
由于每次添加或删除数时只会改变 ca[pos]c_{a[pos]}ca[pos]​，而且只会 ±1\pm1±1。所以：
由
s=∑i=1kci2=c12+⋯+ca[pos]2+⋯+ck2s=\sum\limits_{i=1}^k c_i^2=c_1^2+\cdots+c_{a[pos]}^2+\cdots+c_k^2
s=i=1∑k​ci2​=c12​+⋯+ca[pos]2​+⋯+ck2​
可得
s′=c12+⋯+(ca[pos]±1)2+⋯+ck2=c12+⋯+ca[pos]2±2×ca[pos]+1+⋯+ck2=s±2×ca[pos]+1\begin{aligned}
	s&#x27;&amp;=c_1^2+\cdots+(c_{a[pos]}\pm 1)^2+\cdots+c_k^2\\
	&amp;=c_1^2+\cdots+c_{a[pos]}^2\pm2\times c_{a[pos]}+1+\cdots+c_k^2\\
	&amp;=s\pm2\times c_{a[pos]}+1
\end{aligned}
s′​=c12​+⋯+(ca[pos]​±1)2+⋯+ck2​=c12​+⋯+ca[pos]2​±2×ca[pos]​+1+⋯+ck2​=s±2×ca[pos]​+1​
转移时修改即可。
例题：P5268 [SNOI2017] 一个简单的询问
简要题意：给出一个长度为 nnn 的数列 aaa（值域 [1,n][1,n][1,n]），mmm 个询问，每次询问给出数对 l1,r1,l2,r2l_1,r_1,l_2,r_2l1​,r1​,l2​,r2​ 表示查询：
∑x=0∞get(l1,r1,x)×get(l2,r2,x)\sum\limits_{x=0}^\infty \text{get}(l_1,r_1,x)\times \text{get}(l_2,r_2,x)
x=0∑∞​get(l1​,r1​,x)×get(l2​,r2​,x)
get(l,r,x)\text{get}(l,r,x)get(l,r,x) 表示区间 [l,r][l,r][l,r] 中 xxx 的出现次数。
数据范围：n,m≤5×104,1≤ai≤nn,m\le 5\times 10^4,1\le a_i\le nn,m≤5×104,1≤ai​≤n。
首先因为每次询问给出的是一个四元组，所以莫队不能直接做。
考虑对询问进行拆分。
可以发现，get(l,r,x)=get(1,r,x)−get(1,l−1,x)\text{get}(l,r,x)=\text{get}(1,r,x)-\text{get}(1,l-1,x)get(l,r,x)=get(1,r,x)−get(1,l−1,x)。展开：
（为方便，记 g(p)=get(1,p,x)\text{g}(p)=\text{get}(1,p,x)g(p)=get(1,p,x)）
∑x=0∞get(l1,r1,x)×get(l2,r2,x)=∑x=0∞(g(r1)−g(l1−1))×(g(r2)−g(l2−1))=∑x=0∞g(r1)×g(r2)−g(l1−1)×g(r2)−g(l2−1)×g(r1)+g(l1−1)×g(l2−1)\begin{aligned}
	&amp;\sum\limits_{x=0}^\infty
	\text{get}(l_1,r_1,x)\times\text{get}(l_2,r_2,x)\\
	=&amp;\sum\limits_{x=0}^\infty
	\big(\text{g}(r_1)-\text{g}(l_1-1)\big)\times
	\big(\text{g}(r_2)-\text{g}(l_2-1)\big)\\
	=&amp;\sum\limits_{x=0}^\infty
	\text{g}(r_1)\times\text{g}(r_2)-\text{g}(l_1-1)\times\text{g}(r_2)\\
	&amp;-\text{g}(l_2-1)\times\text{g}(r_1)+\text{g}(l_1-1)\times\text{g}(l_2-1)
\end{aligned}
==​x=0∑∞​get(l1​,r1​,x)×get(l2​,r2​,x)x=0∑∞​(g(r1​)−g(l1​−1))×(g(r2​)−g(l2​−1))x=0∑∞​g(r1​)×g(r2​)−g(l1​−1)×g(r2​)−g(l2​−1)×g(r1​)+g(l1​−1)×g(l2​−1)​
若记 ask(l,r)=g(l)×g(r)\text{ask}(l,r)=\text{g}(l)\times\text{g}(r)ask(l,r)=g(l)×g(r)，
原式=ask(r1,r2)−ask(l1−1,r2)−ask(l2−1,r1)+ask(l1,l2)\text{原式}=\text{ask}(r_1,r_2)-\text{ask}(l_1-1,r_2)-\text{ask}(l_2-1,r_1)+\text{ask}(l_1,l_2)
原式=ask(r1​,r2​)−ask(l1​−1,r2​)−ask(l2​−1,r1​)+ask(l1​,l2​)
肉眼可见，我们将原来的四元询问转换为四个二元询问。虽然 l,rl,rl,r 并不表示区间，但我们可以用相同的思想处理询问。
如何 O(1)O(1)O(1) 转移 ask(l,r)\text{ask}(l,r)ask(l,r)？
考虑若其中一个（g(l),g(r)\text{g}(l),\text{g}(r)g(l),g(r)）增加 1，则它们的积会增加另一个数。具体见代码。
核心代码：
// cl[i]: [1,l] 中 i 的个数；cr[i]: [1,r] 中 i 的个数；now: sum(cl[i]*cr[i])int cl[N],cr[N],now,ans[N];void mt()&#123;    init();    sort(q+1,q+(m&lt;&lt;2)+1);// 原来的一个询问拆成四个，所以 &lt;&lt;2    for(int i=1,l=0,r=0;i&lt;=(m&lt;&lt;2);i++)    &#123;        #define q q[i]        while(l&lt;q.l)++cl[a[++l]],now+=cr[a[l]];// 相应的转移        while(r&lt;q.r)++cr[a[++r]],now+=cl[a[r]];        while(q.l&lt;l)--cl[a[l]],now-=cr[a[l--]];        while(q.r&lt;r)--cr[a[r]],now-=cl[a[r--]];        ans[q.id]+=(q.t*now);        #undef q    &#125;&#125;int main()&#123;    ...    for(int i=1,l1,r1,l2,r2,p=1;i&lt;=m;i++)    &#123;        scanf(&quot;%d %d %d %d&quot;,&amp;l1,&amp;r1,&amp;l2,&amp;r2);        q[p++]=&#123;min(l1-1,l2-1),max(l1-1,l2-1),i,1 &#125;;// 拆开        q[p++]=&#123;min(l1-1,r2),  max(l1-1,r2),  i,-1&#125;;        q[p++]=&#123;min(l2-1,r1),  max(l2-1,r1),  i,-1&#125;;        q[p++]=&#123;min(r1,r2),	max(r1,r2),	i,1 &#125;;    &#125;    ...    return 0;&#125;
卡常：P1972 [SDOI2009] HH的项链
题意：同 DQUERY - D-query。但数据范围不同，还卡莫队。
我们就这么屈服了吗？没有！
其实本题莫队理论上 n=106,O(nn)≈109n=10^6,O(n\sqrt{n})\approx 10^9n=106,O(nn​)≈109 是可以过的，因为莫队经常跑不满。但经不住毒瘤出题人卡莫队。
考虑常数优化。注意到大部分时间花在转移 l,rl,rl,r 指针上。
由于 aia_iai​ 的波动程度可能非常大，又由于我们的转移方式是
while(q.l&lt;l)now+=(!(cnt[a[--l]]++));
访问 cnt 时下标波动程度大，导致访问慢。
如何加速？关键在于用等价但是数组访问只与下标有关的转移方式。因为下标经过排序后相对连续。
考虑记录两个数组 prei,nxtipre_i,nxt_iprei​,nxti​ 分别表示上一个和下一个出现 aia_iai​ 的位置的下标。如添加 l=il=il=i 时，r&lt;nxtir&lt;nxt_ir&lt;nxti​，即右边那个最近的 aia_iai​ 已经不在 [l,r][l,r][l,r] 中（显然左边那个更不会），那么 [l,r][l,r][l,r] 中多了一个不同的数，now←now+1now\gets now+1now←now+1。其他同理。
代码：
for(int i=1;i&lt;=n;i++)pre[i]=lst[a[i]],lst[a[i]]=i;fill(lst,lst+A,0x3f3f3f3f);for(int i=n;i;i--)nxt[i]=lst[a[i]],lst[a[i]]=i;for(int i=1,l=1,r=0;i&lt;=m;i++)&#123;    #define q q[i]    while(q.l&lt;l)now+=(nxt[--l]&gt;r);    while(r&lt;q.r)now+=(pre[++r]&lt;l);    while(l&lt;q.l)now-=(nxt[l++]&gt;r);    while(q.r&lt;r)now-=(pre[r--]&lt;l);    ans[q.id]=now;    #undef q&#125;
*带修莫队
简介
如何实现带修莫队？
发现普通莫队不支持修改，那么如何使它支持修改操作呢？
考虑存询问时加一个变量 tit_iti​ 表示进行此询问时前面修改了几次。同时存下每一个修改操作（无需排序）。
再新增一个指针 ttt 表示当前区间所在的时间位置。那么移动方向就从 444 个变为 666 个：[l−1,r,t],[l,r+1,t],[l+1,r,t],[l,r−1,t],[l,r,t−1],[l,r,t+1][l-1,r,t],[l,r+1,t],[l+1,r,t],[l,r-1,t],[l,r,t-1],[l,r,t+1][l−1,r,t],[l,r+1,t],[l+1,r,t],[l,r−1,t],[l,r,t−1],[l,r,t+1]。新增的两个为时间轴上的移动。
例题
例题：P1903 [国家集训队] 数颜色 / 维护队列
简要题意：给出一个长度为 nnn 的数列，mmm 个操作，要求支持两种操作：查询区间有多少不同的数、单点修改。
数据范围：n,m≤1.33333×105,ai≤106n,m\le 1.33333\times 10^5,a_i\le 10^6n,m≤1.33333×105,ai​≤106。
板子题，直接上代码：
constexpr int N=214514,A=1145141;// A：a 的值域int n,m,S,qm,a[N];// qm：询问的个数inline int bel(int x)&#123;return (x-1)/S+1;&#125;// 分块struct query&#123;    int l,r,t,id;// 额外记录时间    friend inline bool operator &lt; (query x,query y)    &#123;//		若 l 所在块不同	按 l 的块的编号 否则 若 r 所在块不同 按 r 的块的编号 否则按时间排        return (bel(x.l)^bel(y.l)?bel(x.l)&lt;bel(y.l):(bel(x.r)^bel(y.r)?bel(x.r)&lt;bel(y.r):x.t&lt;y.t));    &#125;&#125;;query q[N];struct modify// 新增：修改操作&#123;int p,v;&#125;;modify mo[N];int cnt[A],now,ans[N];// 类似于普通莫队void mt()&#123;    S=int(ceil(pow(n,0.66)));// 这里块长需要调整，具体可以可以看    // https://oi-wiki.org/misc/modifiable-mo-algo/ 中的证明    sort(q+1,q+qm+1);    for(int i=1,l=1,r=0,t=0;i&lt;=qm;i++)    &#123;        #define q q[i]        #define p mo[t].p        #define v mo[t].v        while(q.l&lt;l)now+=(!(cnt[a[--l]]++));// 类似        while(r&lt;q.r)now+=(!(cnt[a[++r]]++));        while(l&lt;q.l)now-=(!(--cnt[a[l++]]));        while(q.r&lt;r)now-=(!(--cnt[a[r--]]));        // 压行：先加时间 如果在当前区间内	   相应的转移	   *直接交换 v 和 a[p]        while(t&lt;q.t)&#123;t++;if(l&lt;=p&amp;&amp;p&lt;=r)now-=(!(--cnt[a[p]])-!(cnt[v]++));swap(a[p],v);&#125;        while(q.t&lt;t)&#123;if(l&lt;=p&amp;&amp;p&lt;=r)now-=(!(--cnt[a[p]])-!(cnt[v]++));swap(a[p],v);t--;&#125;        ans[q.id]=now;        #undef q        #undef p        #undef v    &#125;&#125;
*回滚莫队
简介
何时使用回滚莫队？
对于某些问题，普通莫队可能难以解决。原因在于删除和添加只有一个可实现。这时就需要回滚莫队了。
先看题：AT_joisc2014_c 歴史の研究。
简要题意：区间询问，给出一个长度为 nnn 的数列 aaa，mmm 个询问，每次询问要求回答
max⁡∀x{x×cnt⁡(x)}\max_{\forall x}\{x\times\operatorname{cnt}(x)\}
∀xmax​{x×cnt(x)}
其中 cnt⁡(x)\operatorname{cnt}(x)cnt(x)，表示 xxx 在 [l,r][l,r][l,r] 区间中的出现次数。
此题添加数很方便，但删除数却很麻烦。因为当最大值改变（如变小）时，我们无法确定新的最大值。
又如求区间 mex⁡\operatorname{mex}mex 时（P4137 Rmq Problem / mex），删除数方便，添加数麻烦。
这时就要用到回滚莫队了。它只用删除和添加中的一个操作，剩下的就回滚解决。
算法实现
算法流程

对原序列进行分块，对询问按以 bel[li]bel[l_i]bel[li​] 升序为第一关键字，rir_iri​ 升序为第二关键字排序。
如果 bel[li]≠bel[li−1]bel[l_i]\ne bel[l_{i-1}]bel[li​]​=bel[li−1​]，那么将 lll 初始化为 bel[li]bel[l_i]bel[li​] 的右端点的后一个位置，将 rrr 初始化为 bel[li]bel[l_i]bel[li​] 的右端点。
此时：

若 bel[li]=bel[ri]bel[l_i]=bel[r_i]bel[li​]=bel[ri​]，直接暴力回答。
反之，

移动 r→rir\to r_ir→ri​。
暂存当前答案 tmptmptmp。
移动 l→lil\to l_il→li​。
记录答案 ansi←nowans_i\gets nowansi​←now。
回滚，使 lll 回滚回 bel[li]bel[l_i]bel[li​] 的右端点的后一个位置，同时更新答案 now←tmpnow\gets tmpnow←tmp。





代码实现
typedef long long ll;//!constexpr int N=114514,INF=0x3f3f3f3f;int n,m;int a[N];int bel[N],S;struct query&#123;    int l,r,id;    friend inline bool operator &lt; (query x,query y)    &#123;return (bel[x.l]^bel[y.l]?bel[x.l]&lt;bel[y.l]:x.r&lt;y.r);&#125;&#125;;query q[N];ll ans[N],now,tmp;unordered_map&lt;int,int&gt; cnt,tcnt;void rbmt()&#123;    S=int(ceil(pow(n,.5)));    for(int i=1;i&lt;=n;i++)bel[i]=(i-1)/S+1;    sort(q+1,q+m+1);bel[q[0].l=0]=INF;    for(int i=1,l,r;i&lt;=m;i++)    &#123;        if(bel[q[i].l]^bel[q[i-1].l])cnt.clear(),now=-INF,r=bel[q[i].l]*S,l=r+1;        #define q q[i]        if(bel[q.l]==bel[q.r])        &#123;            tmp=-INF,tcnt.clear();            for(int j=q.l;j&lt;=q.r;j++)tmp=max(tmp,1ll*(++tcnt[a[j]])*a[j]);            ans[q.id]=tmp;        &#125;        else        &#123;            while(r&lt;q.r)now=max(now,1ll*(++cnt[a[++r]])*a[r]);            tmp=now;            while(q.l&lt;l)now=max(now,1ll*(++cnt[a[--l]])*a[l]);            ans[q.id]=now;            now=tmp;// rollback            while(l&lt;=bel[q.l]*S)--cnt[a[l++]];        &#125;        #undef q    &#125;&#125;int main()&#123;    scanf(&quot;%d %d&quot;,&amp;n,&amp;m);    for(int i=1;i&lt;=n;i++)scanf(&quot;%d&quot;,a+i);    for(int i=1;i&lt;=m;i++)scanf(&quot;%d %d&quot;,&amp;q[i].l,&amp;q[i].r),q[i].id=i;    rbmt();    for(int i=1;i&lt;=m;i++)printf(&quot;%lld\n&quot;,ans[i]);    return 0;&#125;
莫队延迟更新答案
出处
该方法整理自：

「一叶知秋。」大佬的洛谷题解
「qwaszx」大佬的洛谷题解
「一扶苏一」大佬的洛谷题解

也许还有。我看到的就这些。
其实就是普通莫队的升级版。
算法思想 &amp; 实现
对莫队算法进行观察，不难发现移动 l,rl,rl,r 指针过程中的答案我们并不需要，于是就不一定要 O(1)O(1)O(1) 移动指针并更新答案。只需要能 O(1)O(1)O(1) 移动指针，并记录修改，移动 l,rl,rl,r 结束后再 ≤O(n)\le O(\sqrt{n})≤O(n​) 地更新答案即可。
这个寄巧很早就出现了，但无人详细记载，故记之。
更具体的，考虑 P4137 Rmq Problem / mex 这题。
此题 n,m,ai≤2×105n,m,a_i\le 2\times 10^5n,m,ai​≤2×105，我们可以进行值域分块，开个桶，cnticnt_icnti​ 表示 iii 在 [l,r][l,r][l,r] 中出现次数（而非是否出现，方便维护）。每个块 SSS 维护块内的数在 [l,r][l,r][l,r] 中出现的个数，即
exiS=∑i∈S[cnti&gt;0]exi_S=\sum_{i\in S}[cnt_i&gt;0]
exiS​=i∈S∑​[cnti​&gt;0]
当移动指针，添加/删除数时，直接修改 cntcntcnt，同时修改 exiexiexi。不急着更新答案，但移动指针结束后，扫过值域分块，O(n)O(\sqrt{n})O(n​) 更新答案 nownownow。具体的，O(n)O(\sqrt{n})O(n​) 遍历每个块 SSS，若 exiS=∣S∣exi_S=|S|exiS​=∣S∣，跳到下一个块，反之 mex⁡\operatorname{mex}mex 必定在块内，再次 O(n)O(\sqrt{n})O(n​) 遍历每个块内元素 i∈Si\in Si∈S，必定 ∃i,cnti=0,∀j&lt;i,cnti&gt;0\exist i,cnt_i=0,\forall j&lt;i,cnt_i&gt;0∃i,cnti​=0,∀j&lt;i,cnti​&gt;0，此时 iii 即为所求。
本质上，该方法就是利用莫队对答案修改 | 询问次数 O(nn)∣O(n)O(n\sqrt{n})|O(n)O(nn​)∣O(n) 的特性，调整对答案的维护复杂度，将原来维护的答案修改 | 询问复杂度 O(1)∣O(1)O(1)|O(1)O(1)∣O(1) 的高要求降为 O(1)∣O(n)O(1)|O(\sqrt{n})O(1)∣O(n​)，以适应更多题目。
但有时第一时间想到的是 O(n)∣O(1)O(\sqrt{n})|O(1)O(n​)∣O(1) 做法，此时就需要修改策略。
代码
constexpr int N=214514,B=514;int n,m,a[N];struct qry&#123;int l,r,id;&#125;;qry q[N];int S,bel[N];int cnt[N],exi[B];int ans[N];void mt()&#123;    S=int(ceil(n*pow(m,-.5)));    for(int i=0;i&lt;=n;i++)bel[i]=i/S+1;    std::sort(q+1,q+m+1,[](qry x,qry y)-&gt;bool    &#123;        return bel[x.l]!=bel[y.l]?        (bel[x.l]&lt;bel[y.l]):        (bel[x.l]&amp;1)==(x.r&lt;y.r);    &#125;);    for(int i=1,l=1,r=0,j,k;i&lt;=m;i++)    &#123;        #define q q[i]        while(q.l&lt;l)l--,exi[bel[a[l]]]+=!(cnt[a[l]]++);        while(r&lt;q.r)r++,exi[bel[a[r]]]+=!(cnt[a[r]]++);        while(l&lt;q.l)exi[bel[a[l]]]-=!(--cnt[a[l]]),l++;        while(q.r&lt;r)exi[bel[a[r]]]-=!(--cnt[a[r]]),r--;        for(j=1;exi[j]==S;j++);        for(k=(j-1)*S;cnt[k];k++);        ans[q.id]=k;    &#125;&#125;int main()&#123;    scanf(&quot;%d %d&quot;,&amp;n,&amp;m);    for(int i=1;i&lt;=n;i++)scanf(&quot;%d&quot;,a+i);    for(int i=1;i&lt;=m;i++)scanf(&quot;%d %d&quot;,&amp;q.l,&amp;q.r),q.id=i;    mt();    for(int i=1;i&lt;=m;i++)printf(&quot;%d\n&quot;,ans[i]);    return 0;&#125;
例题：P5906 【模板】回滚莫队&amp;不删除莫队
对不住了，回滚莫队。
题意：给定一个序列，多次询问一段区间 [l,r][l,r][l,r]，求区间中相同的数的最远间隔距离。序列中两个元素的间隔距离指的是两个元素下标差的绝对值。
数据范围：1≤n,m≤2⋅1051\leq n,m\leq 2\cdot 10^51≤n,m≤2⋅105，1≤ai≤2⋅1091\leq a_i\leq 2\cdot 10^91≤ai​≤2⋅109。
考虑普通莫队。硬伤：当删除值时，若最大值改动，难以维护。
考虑离散化后对原题值域进行分块。维护每个值在 [l,r][l,r][l,r] 中的最远距离，同时维护块内距离最大值和全局最大值。此时复杂度（修改 | 询问）O(n)−O(1)O(\sqrt{n})-O(1)O(n​)−O(1)。
考虑转换成 O(n)−O(1)O(\sqrt{n})-O(1)O(n​)−O(1)。
「qwaszx」大佬的神之一手——再次值域分块！
刚才的对数进行值域分块就不要了，只要保存每个数在区间中最边缘的两个位置，同时分块改为对距离值域分块！具体的，cnticnt_icnti​ 表示有多少个数满足 [l,r][l,r][l,r] 内最远间隔距离为 iii，sumSsum_SsumS​ 表示块 SSS 内 cntcntcnt 之和，即 sumS=∑j∈Scntjsum_S=\sum_{j\in S}cnt_jsumS​=∑j∈S​cntj​。
若修改最远间隔距离，直接 O(1)O(1)O(1) 修改 cntcntcnt 和 sumsumsum，而查询时则从大往小扫过值域分块，具体的，块 TTT 为最大的一个块使得满足 sumT&gt;0sum_T&gt;0sumT​&gt;0，则一定 ∃k∈S,∀l,l&gt;k,cntl=0,cntk&gt;0\exist k\in S,\forall l,l&gt;k,cnt_l=0,cnt_k&gt;0∃k∈S,∀l,l&gt;k,cntl​=0,cntk​&gt;0。即 kkk 本身为最远间隔距离的最大值。
实现与 P4137 Rmq Problem / mex 类似。
例题：P3834 【模板】可持久化线段树 2
嘿嘿没想到吧，主席树！
又双㕛叒叕考虑值域分块。像上一题一样维护 cnt,sumcnt,sumcnt,sum，O(1)O(1)O(1) 修改。cnticnt_icnti​ 表示 [l,r][l,r][l,r] 内 iii 的数量。
从小到大扫过每个块，记录 sumsumsum 的前缀和，若前缀和 preS−1+sumS≥kpre_{S-1}+sum_S\ge kpreS−1​+sumS​≥k，则第 kkk 大在该区间内。从小到大扫过 SSS 内表示的每个数，累加 cntcntcnt 直到找到第 kkk 大。
结束
Thanks!\Huge
\text{Thanks!}
Thanks!

后记
此 PPT 是本人一边学习莫队一边写的，肯定有诸多不足，还请包容。
当然还有树上莫队、二维莫队，由于难度过高，我自己也不会，就不多做介绍了。可以通过 OI-Wiki 自学。
]]></content>
      <tags>
        <tag>Algorithms</tag>
      </tags>
  </entry>
  <entry>
    <title>数论</title>
    <url>/number-theory/</url>
    <content><![CDATA[唯一分解定理
n=∏ipiαiνp(i)(n)=αin=\prod_i p_i^{\alpha_i}\\
\nu_{p(i)}(n)=\alpha_i
n=i∏​piαi​​νp(i)​(n)=αi​

素数
Fermat 素性检验：检验 an−1≡1(modn)a^{n-1}\equiv 1\pmod nan−1≡1(modn)。
二次探测定理：检验 x2≡1(modn)  ⟹  x≡1(modn)∨x≡n−1(modn)x^2\equiv 1\pmod n\implies x\equiv 1\pmod n\lor x\equiv n-1\pmod nx2≡1(modn)⟹x≡1(modn)∨x≡n−1(modn)。
上述检验若失败则说明 nnn 必不是质数。
Miller Rabin
分解 Fermat 素性检验中的指数，n−1=u×2tn-1=u\times 2^tn−1=u×2t。
对于一个底数 aaa，求出 v=au(modn)v=a^u\pmod nv=au(modn)。进行至多 ttt 次 v←v2v\gets v^2v←v2 过程中进行二次探测。
通过所有二次探测后进行 Fermat 素性检验。
inline ll qmul(ll a,ll b,ll m)&#123;    return (ull(a)*b-ull(ld(a)/m*b)*m+m)%m;&#125;inline ll qpow(ll x,ll y,ll m)&#123;    ll r=1;    for(;y;x=qmul(x,x,m),y/=2)if(y&amp;1)r=qmul(r,x,m);    return r;&#125;constexpr ll A[7]=&#123;2,325,9375,28178,450775,9780504,1795265022&#125;;// constexpr ll A[12]=&#123;2,3,5,7,11,13,17,19,23,29,31,37&#125;;inline bool MillerRabin(ll n)&#123;    if(n&lt;3||n%2==0)return n==2;    if(n%3==0)return n==3;    ll u=n-1,t=0;    while(u%2==0)u/=2,t++;    for(int i=0;i&lt;7;i++)    &#123;        ll v=qpow(A[i]%n,u,n);        if(v==0||v==1)continue;        int s=0;        for(;s&lt;t;s++)        &#123;            if(v==n-1)break;            v=qmul(v,v,n);        &#125;        if(s==t)return false;    &#125;    return true;&#125;
筛
埃氏筛
std::vector&lt;int&gt; p;std::bitset&lt;V&gt; np;for(int i=2;i&lt;=n;i++)if(!np[i])&#123;    p.push_back(i);    if(1ll*i*i&gt;n)continue;    for(int j=i*i;j&lt;=n;j+=i)np[j]=true;&#125;
线性筛
std::vector&lt;int&gt; p;std::bitset&lt;A&gt; np;for(int i=2;i&lt;=n;i++)&#123;    if(!np[i])p.push_back(i);    for(int j:p)    &#123;        if(1ll*i*j&gt;n)break;        np[i*j]=true;        if(i%j==0)break;    &#125;&#125;
爱用哪个用哪个。级别在 10810^8108 以下时埃氏筛可能有常数优势，10910^9109 时线性筛更快。
欧几里得算法
若 p=kq+rp=kq+rp=kq+r，则 r=p mod q,k=⌊p/q⌋r=p\bmod q,k=\lfloor p/q\rfloorr=pmodq,k=⌊p/q⌋。
设 a&gt;b,g=gcd⁡(a,b)a&gt;b,g=\gcd(a,b)a&gt;b,g=gcd(a,b)，则 g∣a,g∣bg\mid a,g\mid bg∣a,g∣b，即 g∣(a−kb)g\mid (a-kb)g∣(a−kb)，g∣a mod bg\mid a\bmod bg∣amodb。
可得 gcd⁡(a,b)=gcd⁡(b,a−b)=gcd⁡(b,a mod b)\gcd(a,b)=\gcd(b,a-b)=\gcd(b,a\bmod b)gcd(a,b)=gcd(b,a−b)=gcd(b,amodb)。
template&lt;typename T&gt; inline T gcd(T a,T b)&#123;return b?gcd(b,a%b):a;&#125;
裴蜀定理
∃x,y∈Z,ax+by=gcd⁡(a,b)\exists x,y\in\mathbb{Z},ax+by=\gcd(a,b)∃x,y∈Z,ax+by=gcd(a,b)。
显然可以在欧几里得算法过程中构造。
设 a=kb+r,gcd⁡(a,b)=bx+rya=kb+r,\gcd(a,b)=bx+rya=kb+r,gcd(a,b)=bx+ry，则 gcd⁡(a,b)=bx+(a−kb)y=ay+(x−ky)b\gcd(a,b)=bx+(a-kb)y=ay+(x-ky)bgcd(a,b)=bx+(a−kb)y=ay+(x−ky)b。
即 x′=y,y′=x−kyx&#x27;=y,y&#x27;=x-kyx′=y,y′=x−ky。
exCRT
为了求解线性同余方程 ax≡b(modm)ax\equiv b\pmod max≡b(modm)，通过 exgcd 求解 gcd⁡(a,m)=ax′+my′\gcd(a,m)=ax&#x27;+my&#x27;gcd(a,m)=ax′+my′。
可得
ax′bgcd⁡(a,m)+my′bgcd⁡(a,m)=ba\frac{x&#x27;b}{\gcd(a,m)}+m\frac{y&#x27;b}{\gcd(a,m)}=b
agcd(a,m)x′b​+mgcd(a,m)y′b​=b
这样我们就解出了一个特解。发现若 x0x_0x0​ 是一个解，那么 x0+kmgcd⁡(a,m)x_0+k\dfrac{m}{\gcd(a,m)}x0​+kgcd(a,m)m​ 也是一个解。
ax′b+kmgcd⁡(a,m)+my′b−kagcd⁡(a,m)=ba\frac{x&#x27;b+km}{\gcd(a,m)}+m\frac{y&#x27;b-ka}{\gcd(a,m)}=b\\
agcd(a,m)x′b+km​+mgcd(a,m)y′b−ka​=b
即 x≡x0(modm/gcd⁡(a,m))x\equiv x_0\pmod{m/\gcd(a,m)}x≡x0​(modm/gcd(a,m))。
那么对于方程组
{a1x≡b1(modm1)a2x≡b2(modm2)⋮anx≡bn(modmn)\begin{cases}
	a_1x\equiv b_1\pmod{m_1}\\
	a_2x\equiv b_2\pmod{m_2}\\
	\qquad\vdots\\
	a_nx\equiv b_n\pmod{m_n}\\
\end{cases}
⎩⎪⎪⎪⎪⎪⎨⎪⎪⎪⎪⎪⎧​a1​x≡b1​(modm1​)a2​x≡b2​(modm2​)⋮an​x≡bn​(modmn​)​
解得
{x≡x1(modm1′)x≡x2(modm2′)⋮x≡xn(modmn′)\begin{cases}
	x\equiv x_1\pmod{m_1&#x27;}\\
	x\equiv x_2\pmod{m_2&#x27;}\\
	\qquad\vdots\\
	x\equiv x_n\pmod{m_n&#x27;}\\
\end{cases}
⎩⎪⎪⎪⎪⎪⎨⎪⎪⎪⎪⎪⎧​x≡x1​(modm1′​)x≡x2​(modm2′​)⋮x≡xn​(modmn′​)​
然后每次合并两个方程。设 x=x1+m1′y1=x2+m2′y2x=x_1+m_1&#x27;y_1=x_2+m_2&#x27;y_2x=x1​+m1′​y1​=x2​+m2′​y2​，可得 m1′y1=x2−x1+m2′y2≡x2−x1(modm2′)m_1&#x27;y_1=x_2-x_1+m_2&#x27;y_2\equiv x_2-x_1\pmod{m_2&#x27;}m1′​y1​=x2​−x1​+m2′​y2​≡x2​−x1​(modm2′​)。解得 y1≡y0(modm2′/gcd⁡(m1′,m2′))y_1\equiv y_0\pmod{m_2&#x27;/\gcd(m_1&#x27;,m_2&#x27;)}y1​≡y0​(modm2′​/gcd(m1′​,m2′​))。代回有 x=x1+m1′y1≡x1+m1′y0(modm1′m2′/gcd⁡(m1′,m2′)=lcm⁡(m1′,m2′))x=x_1+m_1&#x27;y_1\equiv x_1+m_1&#x27;y_0\pmod{m_1&#x27;m_2&#x27;/\gcd(m_1&#x27;,m_2&#x27;)=\operatorname{lcm}(m_1&#x27;,m_2&#x27;)}x=x1​+m1′​y1​≡x1​+m1′​y0​(modm1′​m2′​/gcd(m1′​,m2′​)=lcm(m1′​,m2′​))。
CRT
数论分块
]]></content>
      <tags>
        <tag>Math</tag>
      </tags>
  </entry>
  <entry>
    <title>2025 年暑假计划</title>
    <url>/plan-2025summer/</url>
    <content><![CDATA[
  40fff3a5cf27b77ac08956115c071329e5e28f65186d644c44ba8dad7423807a40f3801c0fa8a3872882060f80be8708d712878114bb007a5bd598498c6902ad1bef47d842cac34ef7ff285a3b22ed5b932a31a8393d64a1a943b37d3754afd3ce41e631c72b07dcdfaf0c9a00d162d8697f2afe446d5e976d1534caa73d84f044764181126078b0ab543abb1ccdd76fa3c25a4996f6ca4c228528c6730f8191520f08ef3195c94f4ad2d0ada51123ebb87d2dae183a2874d2a5a30b15ad3573f9f11d3d4a37609f9c431287e9ebd20f533a809b52ee7a4e6d1d87fabdca12ef75eeba1b47d32e7139f641f55a1ec3150114029062592b990b36dbb418e680ef6b6e767b8d3cef874da4734e95949fb81b6eeaa5452a3d5e7d64b0bb197ad1b4473c8b4c97485e9346c244992b885c2b8622778429b2f3305ccc0c8dd0abaf98a7dfe8ba8bc319f4fa2913fa18715f9a7947590360a7f6d15f1091683c8a530fb6c7405d3ba318bf1977fe55b4b34b956962912930c804838b29c2d12de85b12f054bc466f7f60936d98a6f03b4f0c0ddddcc1ba363cfe926ac11c5aadef5d83f0138c30e798e8d0c01f52ae60565e60ac0b8aca6e5e5e0d96307760e7727f60ab4d1867d121daeed4a5676b81552f7c484f7c55dcf7d61358a3f21a3debc33c6f646da1715d1dad5bcbff7c4a74d47ceadbe869b4ee57e1e3ce7deae6cb06a4afa65fd57341980c9071c2eb58dee55f2ef58314c0575596a40d452b8f9f0dd29bc20d6f2e01dbdcfd6027a014d5c8ff20760a0dca109cdeb133df2caae4102eb57f0b2d361af3ffd2dab8fa56966eaefb2740af6d258155974d3d32807f15f097f46dc42eb4207e1715cb04742ada9fae692d6fe5ac7a02fa5e2a1fb0db8c4f1e5f80f0f016a273fcb41424aa26878732be4066fb22cbf11eb61d5fdf51440c7ab236d3611cc6a807c52c1d87bbbb9d06df3fe801f896968ad94551d00ac06fd73400a597bb7e9847b1f6f8c603cb7594649f17d1a96b688e6531e9fb50ef9c4a787f7f5275476cd7e475a98e1e8df2c5e9d3aa5e0742de230910d77d141c68d9097f317e06d0db49c37c0f59acabb941eaa42db5c742baf6cab22d87850d0d32f909d029201b9d267a0c27980d4761cdb3dce6acd9d883e27b92bbf28baa18a5bcd64fe211783e64ecf651c6031743dcd6ab8be3790ea0cdfa6b22d349e9a7decf3f2a5d076b5cdd354d7ab52b2aeef126e6d96eaeb6ba37e7e960c774e5bb6d9811c8c5619ef2c86bf982f6fa049d13001d45becf75d1cef8e312ea4ee5df69527b7db0cbf868998ee7935a594c1da42994e5a3b5da0fd1fb94b229072cbf84339b27438ddc75279590b1648b6e4a4fe33558316845be0e9742963608ef30ba06396d6430e01732e42a9ce96cecfcf623cdc56aee1db93ef6f73d45274471e7effdd94d2d2393407fc396e56a70eb6749315d6ed1cee897dff2cf70fdfbba54407cd7ba019bb96fe772c8f23af6bb6c394e6b79c25d7d7b554a031f6cc0ea48b104045c884e6e5d17864df0ef007370b94718835e62fee08e6844da19c76cb8341f40eeaad881148cf046e6a14ef7606f4158c8b090edd915c8c58cbeae4f4c650696c61a0b96811dd49643e22899d337f6c33cbef3e4e517289053b0471cd1eaa56e12451baafb15f4a7ec2af6f6679e1b9e0eeebe5221eb95cdc190c19d2711ae584da12d80f4eb4717a5aa868c7d4bf6279b4759b4f2c2cbcd2622caea0de2c2ff61f422d6adf7494e5a36122a5f0350fc0ee971c2e9c46bb8c1dc73f09faf5b5376b2aa2d7fcbf3af28dfa8f89e121822ab50fcecb94223fa50ce6f58ea636d28e935239b4959f25700f517bb8e0ef1f71831e99e2f0b372a5c85f860716b49f9332fcb2bc6144e50a021586c9303c09e2d2f822598c8783421a9fa2094303f54a2d5921c1adbcae2615ca32901e684680ea7072eef52b8b73502ab490dad580106e53d70ec55609411e311797482aea2146a197eb3f53e498bc79c8fff28db0bce3b6f9ce3b00e9c4f5c3da12017707b0c730fb3cf8a5bfa3f5fd461ee282a6a0a167028eea142e12e99390b24043ae678716f2fa09f5865e0593e1e0cea5a99fa4ee9cb7d4f17f2a89deb1114cb6e20dfb69a151acd538b9b5abbef7b0bc8950951c59f786c1c28b2dce520c2f17fb65e241ab4638331318ed85b8ca25f3570625b467e100c8cc062c76bdfea7745e9a28f0e090607e4be67df58628ac12f12e538059a87d52a5b1400ec55da2b9087d90fe787685f0c7ea6c7b37d79261c426ea64f6fddaae820206f555302adf7421abcfd1428c3660e88c59aed0e84c76232139b25d6951e042d753ac8afbf36f7e3299d32803fbf08a68ab8796b33eb584fa2a835df6cae0ecfa40f8a75c17cd72b44322353e073b2d6bc9c45b766c053423a4db5f5411800ee64f92e237dac159bc248e9d32f69075cddfd98be53092c614ab2c01eaa4c0ab153c207c3abfadd2cc784457b7f98a806c6bb636d155250580b14c633239ab93cef5bf4774eae93357490bf38ad85d913b0a6e5f364182ddd7770eecbc2c8c5054ac073b9066db8c2905cb418203e511c2403b83e13098624e99da86eb543675bb869802d14e7d9431d124f337d9730b4caaecba12fc61f4186bccf99d9a2dfc39e47f584b2c8d13ef34fea260667aea9b25ba90d6400845ab61bfd5d2e052ab28aa538933b8be26fc1161f7661c6d16fd5fd188d38562811f29f2049ae7c060477ca8ae0291917ff055c996d0ce9b9f42581f940474f78374c89320c5e00c5170f9a370b473fc9948ab183c2bb9008118fb414d616a1f48e3c0ee313b5997623b7c137a19000a7361ee613b22d73ee3ef0b69eb44ad95c21251e9ee9408bf9215ba244500dec7733632655960e5acebac4f25bd408f131ca5943a33309aceab942e41fdd56b85e1a9b7f51001119619c67fc7b541ba3ef6667fb67b11177b7a3a11410b3f8c5ef92ec80006d10650137a8c5b44e20c1ff5beedc57154b914ac514dbe456ec926e66224d1855737088f92fadd3e085147e6509e78e3f8f3207061a06fdc007ba75cc01bcc86524c4cfcb6ea114e852ec0fde9dfa410e03fd2c1f6eab7be372cc492fd891a141885e66b7bab9bc694416308ac4185620f0086864444bb09a8c02dad4351d4e2e5158754e67ba65ee0a03bdb0c67db710d8dea061ff45dbb3d76ffdda85d3318436db7165ae0c290bb7aacba68b2c4f2a4fc2c6ed55c1b4c024313fa7d6975c744d368f1c9df58ed9d3552c99249fa308ee5812fc75c3345071965c2f88300bd62c34bc454bba57f3cdd9a8c2770bcf4e1d1d7503e2992414b0849ab673e1c52723ae71a8364243598625d2d91cfca2676a92ca9b0c4cbe0555ef4d935af4fa35e6dd8cdd27afc5a206b93b1b106b328a56af3290e37d666a02eaf40fc8519cc387517933832922595496ec0fcf0a226a0168f42455189348f277c8aa36addc88b3936bb9a78cdf51fc74777c154e9b7d55a0c9772c095c9e2c7dc2b24063f8fb44b739c7730210a9b05ac0cd915992c0b3eb0f8adea6d27fd3d7b4d64a7a3bc7792f0f8bd83d6be1e929f4786493b72710818c6d6851131d06de48ca03834dac13439cb11d66671d7876c8203e18dd1d645cfcad86b5f08889e630a4db218984032df91afcff89243bb6a8b9c1a69950695ab359663fd3b439edefca0a631fff35b864e6cb532682671700503b94639498946d4d71e6b84c82301352cea8af08ef2d48873e9ecde40ed78449905e95f317577bb6863771a8d80d861548502d8f89da5a35eabf7a22062ab816aba37572415defe16e5042852c39370743fea936ea4d480318f38bc3043a1fbdca237c875b6ee46453443c6a9c17881651e18ec3b075dfb808234c272f46a65d53d0b7bbb9908efe5c02dd696ebdf490c159e295768a345c9ceb78c2672c4b58d7368e8005b401520681b3483e18d1f13213ec6676141348acd6cde64b11431314a207ba647e132e6cc8ba735e7bcb19fc62a536fb277f70d85f2261cd5e7fc3cbe9fd96fc3406e63f9aa3c04cf737df22de2d3824f0609b6ae05ec94b7111b01af5de301b8530889b8ee5b7222cc51c5b167dc455036eb268fceab3fb622912c6e80fb7a6ae35b44ff8a8a7733658906c697b510d668871bae538d89cacebe389b81013278ed2fccc2b752d9fd50fa1f85f249c5fe47197afaf2412cc7ca277842394cfc3f05046ddef85be38149793cf6b22cfe3164fa3495e70a0e64f8a44300c7c88a6ce436caedc9c3093f8150a878e1ced60eaef9c18a3eb4289c844fe0acedbb99bbb4789cffe5d051cfe86d73b41dd4189ca33894f4aa5a3cf26acdf5eb5c3299e9e1524c514090dfda9d4627b6fba78bd2a16c496ac1d9021261fcbbef97ad8178546a9fccdedd2e90db99fbef734afd42363d03f62c281f972f3a7bed07606b6656027027ab0e1e4ef0c4c1ba3760a436067ab9643792773938838946afd502c31cc30ddd55dc2828825b38e8bee58f399ee8da3c94b60e2ca54b69e79a47296e2d2b57461330dd8d7be76e817f7cfa56cda0974c711b09e5912ce5a82ff6a360415f1aace22ce07c3340f819d4b157a265fc0d6e79bc1d3fc7670775f6cbf108daa3c37fc51ba548cd9a5c3b72ea9f20219a398e4233c5c1cc55af9d961c3a1f4e068a7d0b26c8be0c6aacf22f8fb4feca80ad80518a9639f818e03d670f1adfc99bd22a913a03e3071f3e9efe0939e2ccf5533910b8c5a591abe6a858004badbb7c831149895fe827a824bb38f07f74d4af0a5b2e2e378977b7a62b08485c05127465a01dfecaf33c65a2a9989d2658095d56e3f7548d65e094b54af7a9a60b15d53c6b5aa6c95104a750d74ffdb6863cc8fc8514a5f953aea108794d1501edd27a718057df797e623f2743473218d45f122dc7f94
  
    
      
      
        Hey, password is required here.
      
    
  

]]></content>
  </entry>
  <entry>
    <title>字符串</title>
    <url>/string/</url>
    <content><![CDATA[本文字符串下标从 111 开始，无歧义时默认 nnn 为当前所述字符串长度。

自动机
自动机（automaton） 是一种对信号序列进行判定的数学模型，可以模拟人类的思考方式，对给定的一串信号给出真或假的判定。
确定有限状态自动机（DFA） 是自动机的一种，在 OI 中较常用，其中信号序列一般使用字符串。
形式化地说，它由五部分组成：

字符集（Σ\SigmaΣ），为信号序列所含信号组成的集合。
状态集合（QQQ），为所有状态构成的集合。DFA 有许多不同含义的状态，可以视作有向图中点。QQQ 可以视作点集。
起始状态（sss），s∈Qs\in Qs∈Q，为一个特殊的状态，是所有转移的起点。
接受状态集合（FFF），F⊆QF\subseteq QF⊆Q，为一些特殊的状态，是判定的依据。
转移函数（δ\deltaδ），δ(u,c)\delta(u,c)δ(u,c) 表示 DFA 在读取到字符 ccc，且当前在状态 uuu 的情况下，DFA 的状态转移到 δ(u,c)\delta(u,c)δ(u,c)。如果 uuu 没有 ccc 的转移，则约定 δ(u,v)←null\delta(u,v)\gets\mathrm{null}δ(u,v)←null。null∉F\mathrm{null}\notin Fnull∈/​F 是一个特殊的状态，其不能转移到任何其他状态，不是可接受状态。

若将 DFA 视作有向图，则状态集合可视作点集，转移函数可以视作有向图的边。
设 DFA A=(Σ,Q,s,F,δ)A=(\Sigma,Q,s,F,\delta)A=(Σ,Q,s,F,δ) 判定信号序列 SSS，我们有 AAA 工作流程：

设当前状态 uuu，uuu 初始时为 sss；
对于 SSS 中的每一个字符 ccc，执行 u←δ(u,c)u\gets\delta(u,c)u←δ(u,c)，即通过转移函数，转移到新状态；
记 A(S)=[u∈F]A(S)=[u\in F]A(S)=[u∈F] 表示是否接受 SSS。

Trie
考虑构建一个自动机，使得其只接受字符串 sss。很显然，我们可以对 sss 的所有前缀建立状态，将该前缀称为其状态的对应串，然后在所有相邻前缀的状态间建立转移即可。类似的，若使其只接受字符串集合 SSS 中的字符串，可以依次建立状态。上述自动机即为 Trie 树。
形式化地说，构建一颗 Trie 树需要以下步骤：

对于 SSS 中每个字符串 sss，枚举其前缀 s(1,i)s(1,i)s(1,i)，即遍历 i=1…∣s∣i=1\dots |s|i=1…∣s∣；
设状态 uuu 的对应串为 s(1,i)s(1,i)s(1,i)，状态 vvv 的对应串为 s(1,i−1)s(1,i-1)s(1,i−1)。如果不存在状态对应 s(1,i)s(1,i)s(1,i)，新建一个状态；
构建转移 δ(v,s(i))←u\delta(v,s(i))\gets uδ(v,s(i))←u。

         he* -&gt; her*        /(s) -&gt; h -&gt; hi -&gt; his*  \   i -&gt; it*
上图为 S={he,her,his,it}S=\{\texttt{he},\texttt{her},\texttt{his},\texttt{it}\}S={he,her,his,it} 时的 Trie 树。其中 (s) 为起始状态，每个字符串都代表一个状态，-&gt;、\、/ 代表状态间的转移，带 * 的是接受状态。
KMP 与 AC 自动机
自动机结构
我们希望借助自动机完成下述任务：给定字符串 s,ts,ts,t，找出所有等于 ttt 的 sss 的子串。
我们知道 sss 的子串相当于 sss 的一个前缀的一个后缀，所以我们考虑建立一个自动机使得其只接受后缀为 ttt 的字符串，然后依次判定 sss 的每个前缀（输入串）。
类似 Trie，我们对 ttt 的所有前缀建立状态，将该前缀称为其状态的对应串，并让每个状态表示输入串的某个后缀等于该状态的对应串。
设状态 uuu 的深度 dep(u)dep(u)dep(u) 为其对应串长度，定义邻转移为 uuu 到 vvv 的转移，使得 v=δ(u,c)∧dep(v)=dep(u)+1v=\delta(u,c)\land dep(v)=dep(u)+1v=δ(u,c)∧dep(v)=dep(u)+1。那么显然可以建立若干邻转移，其他默认转移到初始状态 sss（sss 对应串为 ∅\varnothing∅）。如下图中，所有 -&gt; 均为邻转移。
(s) -&gt; a -&gt; ap -&gt; app -&gt; appl -&gt; appl -&gt; apple
但由于一个输入串有若干后缀，可能满足多个状态。可以发现较短后缀一定是较长后缀的后缀，即符合状态 uuu 的输入串一定符合对应串是“uuu 的对应串的后缀”的状态。
所以我们修改定义，令每个状态表示输入串的某个后缀等于该状态的对应串，且不存在更长的后缀等于其他状态对应串。也就是说，输入串只满足最长可匹配后缀的状态。
自然的，对于状态 uuu，若状态 vvv 是对应串最长的状态，使得 vvv 的对应串是 uuu 的对应串的真后缀，则称 uuu 的失配链接（fail 指针）指向 vvv。通过不断地跳失配链接，我们可以遍历所有对应串是“uuu 的对应串的后缀”的状态。值得注意的是，失配链接并非转移，其表达的是一种“继承”关系。若 δ(u,c)=s\delta(u,c)=sδ(u,c)=s，我们可以 δ(u,c)←δ(v,c)\delta(u,c)\gets\delta(v,c)δ(u,c)←δ(v,c)，即继承 vvv 的转移。故这些继承来的转移也可以视作跳若干次失配链接后邻转移。
                           fail             &lt;===============================(s) -&gt; t -&gt; to -&gt; tom -&gt; toma -&gt; tomat -&gt; tomato
如上图，tomato 的失配链接指向 to。
构建过程

建立初始状态 sss；
遍历 i=1…∣t∣i=1\dots |t|i=1…∣t∣，

设 s(1,i)s(1,i)s(1,i) 的状态为 uuu，s(1,i−1)s(1,i-1)s(1,i−1) 的状态为 vvv，状态 xxx 的失配链接为 f(x)f(x)f(x)；
f(u)←δ(f(v),s(i))f(u)\gets\delta(f(v),s(i))f(u)←δ(f(v),s(i))；
δ(v,s(i))←u\delta(v,s(i))\gets uδ(v,s(i))←u；
δ(u,∗)←δ(f(u),∗)\delta(u,*)\gets\delta(f(u),*)δ(u,∗)←δ(f(u),∗)；



复杂度分析
不难发现判定一个字符串 sss 的时间复杂度为均摊 O(∣s∣)O(|s|)O(∣s∣)，但构建 KMP 自动机的时间复杂度为 O(∣Σ∣∣t∣)O(|\Sigma||t|)O(∣Σ∣∣t∣)，因为需要拷贝转移。故实际实现中不会拷贝继承来的转移，构建时间复杂度就降到了 O(∣t∣)O(|t|)O(∣t∣)，判定字符串时直接跳失配链接，不难证明判定时间复杂度仍为 O(∣s∣)O(|s|)O(∣s∣)。
综上 KMP 算法时间复杂度为 O(∣s∣+∣t∣)O(|s|+|t|)O(∣s∣+∣t∣)。
推广
上述 DFA 即为 KMP 自动机，观察其形态可以发现其邻转移形成一条链，其他继承来的转移为“返祖边”。结合 Trie 的思想，我们就可以造出 AC 自动机。但这次我们就需要拷贝继承来的转移，（为什么？）。
如果你理解了 KMP 自动机，那么 AC 自动机的构建方式就十分显然了。
后缀数组（SA）
定义 sufi←s[i,n]suf_i\gets s[i,n]sufi​←s[i,n]，rkirk_irki​ 为 sufisuf_isufi​ 在所有后缀中的字典序排名，saisa_isai​ 为字典序第 iii 小的后缀。rk,sark,sark,sa 互逆。
例如 s=aababs=\texttt{aabab}s=aabab 时，aabab&lt;ab&lt;abab&lt;b&lt;bab\texttt{aabab}&lt;\texttt{ab}&lt;\texttt{abab}&lt;\texttt{b}&lt;\texttt{bab}aabab&lt;ab&lt;abab&lt;b&lt;bab，所以 rk=[1,3,5,2,4],sa=[1,4,2,5,3]rk=[1,3,5,2,4],sa=[1,4,2,5,3]rk=[1,3,5,2,4],sa=[1,4,2,5,3]。
后缀排序指求上述数组的过程。
O(nlog⁡2n)O(n\log^2n)O(nlog2n) 做法
考虑朴素倍增。不妨定义 rki,j′rk&#x27;_{i,j}rki,j′​ 表示将 s[∗,∗+2j−1]s[*,*+2^j-1]s[∗,∗+2j−1] 按字典序排序后 s[i,i+2j−1]s[i,i+2^j-1]s[i,i+2j−1] 的排名，sai,j′sa&#x27;_{i,j}sai,j′​ 同理。
倍增分为 log⁡n\log nlogn 轮，第 jjj 轮得到 rki,j′,sai,j′rk&#x27;_{i,j},sa&#x27;_{i,j}rki,j′​,sai,j′​。
具体地，在第 jjj 轮中，按 (rk∗,j−1′,rk∗+2j−1−1,j−1′)\left(rk&#x27;_{*,j-1},rk&#x27;_{*+2^{j-1}-1,j-1}\right)(rk∗,j−1′​,rk∗+2j−1−1,j−1′​) 排序，得到 sai,j′sa&#x27;_{i,j}sai,j′​ 并推出 rki,j′rk&#x27;_{i,j}rki,j′​，注意需要去重。
最终 rki←rki,log⁡n′,sai←sai,log⁡n′rk_i\gets rk&#x27;_{i,\log n},sa_i\gets sa&#x27;_{i,\log n}rki​←rki,logn′​,sai​←sai,logn′​，即倍增覆盖长度大于 nnn，使 sufisuf_isufi​ 等价于 s[i,i+2j−1]s[i,i+2^j-1]s[i,i+2j−1] 后结束。
O(nlog⁡n)O(n\log n)O(nlogn) 做法
考虑到两个关键字的值域都为 O(n)O(n)O(n)，可以使用基数排序，复杂度即可优化到 O(nlog⁡n)O(n\log n)O(nlogn)。
#include &lt;bits/stdc++.h&gt;using std::cin;typedef long long ll;constexpr int N=2e6+114;int n;std::string s;int sa[N],rk[N],id[N],ork[N],buc[N];inline void build()&#123;    int m=1&lt;&lt;7,k=0;    for(int i=1;i&lt;=n;i++)buc[rk[i]=s[i]]++;    for(int i=1;i&lt;=m;i++)buc[i]+=buc[i-1];    for(int i=n;i;i--)sa[buc[rk[i]]--]=i;    for(int j=1;;m=k,k=0,j&lt;&lt;=1)    &#123;        for(int i=n-j+1;i&lt;=n;i++)id[++k]=i;        for(int i=1;i&lt;=n;i++)if(sa[i]&gt;j)id[++k]=sa[i]-j;        std::fill(buc+1,buc+m*2+1,0);        std::copy(rk+1,rk+n*2+1,ork+1);        k=0;        for(int i=1;i&lt;=n;i++)buc[rk[i]]++;        for(int i=1;i&lt;=m;i++)buc[i]+=buc[i-1];        for(int i=n;i;i--)sa[buc[rk[id[i]]]--]=id[i];        for(int i=1;i&lt;=n;i++)rk[sa[i]]=            (ork[sa[i-1]]==ork[sa[i]]&amp;&amp;ork[sa[i-1]+j]==ork[sa[i]+j])?k:++k;        if(k==n)break;    &#125;&#125;int main()&#123;    std::ios::sync_with_stdio(false);    cin.tie(nullptr);    cin&gt;&gt;s;    n=s.size();    s=&#x27; &#x27;+s;    build();    for(int i=1;i&lt;=n;i++)printf(&quot;%d &quot;,sa[i]);    return 0;&#125;
注意 rk′rk&#x27;rk′ 严格满足排名的定义（即小于本身的不同元素的数量），可以维护 rki,j′rk&#x27;_{i,j}rki,j′​ 的值域 mmm，当 m=nm=nm=n 时直接退出。
同时对第二关键字的排序是不必要的，对于 i∈[n−2j+1,n]i\in[n-2^j+1,n]i∈[n−2j+1,n]，rki+2j,j−1′=0rk&#x27;_{i+2^j,j-1}=0rki+2j,j−1′​=0，直接将它们放置在 sai,j′sa&#x27;_{i,j}sai,j′​ 的开头，其他的按照 rki+2j,j−1′rk&#x27;_{i+2^j,j-1}rki+2j,j−1′​ 顺序即可。
hththt 数组
记 lcp⁡(i,j)\operatorname{lcp}(i,j)lcp(i,j) 为 sufi,sufjsuf_i,suf_jsufi​,sufj​ 的最长公共前缀，hti←∣lcp⁡(sai−1,sai)∣,ht1←0ht_i\gets|\operatorname{lcp}(sa_{i-1},sa_i)|,ht_1\gets 0hti​←∣lcp(sai−1​,sai​)∣,ht1​←0。
结论 1 若 rki≤rkj≤rkkrk_i\le rk_j\le rk_krki​≤rkj​≤rkk​，则 ∣lcp⁡(i,j)∣,∣lcp⁡(j,k)∣≥lcp⁡(i,k)|\operatorname{lcp}(i,j)|,|\operatorname{lcp}(j,k)|\ge\operatorname{lcp}(i,k)∣lcp(i,j)∣,∣lcp(j,k)∣≥lcp(i,k)。
结合图片容易理解，lcp⁡\operatorname{lcp}lcp 实际上是一个取区间 min⁡\minmin，也就是说：
结论 2 若 rki&lt;rkjrk_i&lt;rk_jrki​&lt;rkj​，则 ∣lcp⁡(i,j)∣=min⁡k=rk(i)+1rk(j)htk|\operatorname{lcp}(i,j)|=\min\limits_{\mathclap{k=rk(i)+1}}^{rk(j)}ht_k∣lcp(i,j)∣=k=rk(i)+1​minrk(j)​htk​。
大区间的最小值自然不大于其子区间的最小值。
求 hththt 数组所需的一个重要引理：
ht(rki)≥ht(rki−1)−1ht(rk_i)\ge ht(rk_{i-1})-1
ht(rki​)≥ht(rki−1​)−1
证明
记 i−1i-1i−1 的前驱 p←sa(rki−1−1)p\gets sa(rk_{i-1}-1)p←sa(rki−1​−1)，根据定义 ht(rki−1)=∣lcp⁡(sa(rki−1−1),sa(rki−1))∣=∣lcp⁡(p,i−1)∣ht(rk_{i-1})=|\operatorname{lcp}(sa(rk_{i-1}-1),sa(rk_{i-1}))|=|\operatorname{lcp}(p,i-1)|ht(rki−1​)=∣lcp(sa(rki−1​−1),sa(rki−1​))∣=∣lcp(p,i−1)∣。
假设 ht(rki−1)&gt;0ht(rk_{i-1})&gt;0ht(rki−1​)&gt;0，则显然
∣lcp⁡(p+1,i)∣=∣lcp⁡(p+1,i−1+1)∣=∣lcp⁡(sa(rki−1−1)+1,sa(rki−1)+1)∣=∣lcp⁡(sa(rki−1−1),sa(rki−1))∣−1=ht(rki−1)−1\begin{aligned}
	|\operatorname{lcp}(p+1,i)|&amp;=|\operatorname{lcp}(p+1,i-1+1)|\\
	&amp;=|\operatorname{lcp}(sa(rk_{i-1}-1)+1,sa(rk_{i-1})+1)|\\
	&amp;=|\operatorname{lcp}(sa(rk_{i-1}-1),sa(rk_{i-1}))|-1\\
	&amp;=ht(rk_{i-1})-1
\end{aligned}
∣lcp(p+1,i)∣​=∣lcp(p+1,i−1+1)∣=∣lcp(sa(rki−1​−1)+1,sa(rki−1​)+1)∣=∣lcp(sa(rki−1​−1),sa(rki−1​))∣−1=ht(rki−1​)−1​
即同时删去第一个字符，lcp⁡\operatorname{lcp}lcp 减 111。
同时因为 ht(rki−1)&gt;0,rkp&lt;rki−1ht(rk_{i-1})&gt;0,rk_p&lt;rk_{i-1}ht(rki−1​)&gt;0,rkp​&lt;rki−1​，不难发现 rkp+1&lt;rkirk_{p+1}&lt;rk_irkp+1​&lt;rki​。根据结论 1，
∣lcp⁡(sa(rki−1),i)∣≥∣lcp⁡(p+1,i)∣ht(rki)≥ht(rki−1)−1\begin{aligned}
	|\operatorname{lcp}(sa(rk_i-1),i)|&amp;\ge|\operatorname{lcp}(p+1,i)|\\
	ht(rk_i)&amp;\ge ht(rk_{i-1})-1\\
\end{aligned}
∣lcp(sa(rki​−1),i)∣ht(rki​)​≥∣lcp(p+1,i)∣≥ht(rki−1​)−1​
□\square□
以上内容可以结合下图理解。
s=aabbabap=sa(rk(i)-1)ind    rk	suf		p.s.7    1	a		p+11    2	aabbaba	sa(rk_i-1)5    3	aba		i2    4	abbaba	6    5	ba		p4    6	baba	i-13    7	bbaba	
这样，我们就有了均摊 O(n)O(n)O(n) 求 hththt 数组的优美做法。
for(int i=1,k=0;i&lt;=n;i++)&#123;    if(k)k--;    while(s[i+k]==s[sa[rk[i]-1]+k])k++;    ht[rk[i]]=k;&#125;
参考

Bilibili 【manim | 算法】OI自动机大炒饭（字典树，KMP自动机，AC自动机，后缀自动机，广义后缀自动机）

]]></content>
      <tags>
        <tag>Algorithms</tag>
      </tags>
  </entry>
  <entry>
    <title>学长建议</title>
    <url>/suggestion/</url>
    <content><![CDATA[
  
  
    
      
      
        Hey, password is required here.
      
    
  

]]></content>
      <tags>
        <tag>Summary</tag>
      </tags>
  </entry>
  <entry>
    <title>Tarjan 求双连通分量（点双连通分量、边双连通分量）</title>
    <url>/tarjan-bcc/</url>
    <content><![CDATA[注意：本文只针对无向图。
对于无向图，显然不能只考虑简单的连通关系，应该研究一些更强的连通关系：双连通。

前置芝士

点双连通分量：若一个连通分量任意两点间 都存在 至少两条不经过（除起点和终点外）相同点的路径，我们就称这个连通分量 为点双连通分量。
边双连通分量：同理，若一个连通分量任意两点间 都存在 至少两条不经过 相同边的路径，我们就称这个连通分量 为边双连通分量。
Tarjan 求割点和桥

首先要明确的是，若一点（或边）对于原图是割点（或桥），对于其任意包含该点（或边）的子图，该点（或边）仍是割点（或桥）。
可以想到，在一张无向图的点双连通分量中，一个割点所连的点有且只有 111 个（注意这个点必须是指定点双连通分量中的）。注意不是度数为 111，因为可能有重边。原因是若某割点连接了一点双连通分量中的两个点，必然有删去它后该点双连通分量不连通。反之它就不是割点。
同样的，在一张无向图的边双连通分量中，必然不包含桥。
Tarjan 求点双连通分量
算法流程
首先维护一个栈 stk\mathit{stk}stk，一访问点 uuu，就将 uuu 压入 stk\mathit{stk}stk。
书接上回，当判断一点是割点后，我们可以从 stk\mathit{stk}stk 中退点，将这些点加入新的点双中，一直退到 vvv，注意不要退出 uuu，但要在当前点双中加入 uuu。
因为上文说了，虽在一个点双中，割点连接的点只有 111 个，即 vvv，但 uuu 还可能在其他点双中，故不能退栈（或者你退完压回去也可以）。
所以注意，不同于强连通分量和接下来要说的边双，一个点可能在多个点双中。
进一步的，我们甚至可以求出删去 uuu 后连通分量的增加个数，记为 cutucut_ucutu​。每当满足 lowv≥dfnu\mathit{low}_v\ge \mathit{dfn}_ulowv​≥dfnu​，cutu←cutu+1cut_u\gets cut_u+1cutu​←cutu​+1。因为一旦删去 uuu，vvv 将与 uuu 的祖先脱离联系，导致连通分量数量增加 111。
其他与求割点相同。
代码
暂无。

Tarjan 求边双连通分量
算法流程
还是同样的维护 stk\mathit{stk}stk，当判定边 (u,v)(u,v)(u,v) 为桥后，可将 stkstkstk 退到 vvv，并将退的点加入一个新的边双中。有没有发现边双比点双简单多了？是的，由于桥不能存在于边双中，故退到 vvv 即可，没有太多可叽叽歪歪的。
其他与求桥相同。
Upd\texttt{Upd}Upd：实现中，为了避免根节点（可设为 111）所在的边双未被退栈，可以按以下实现：
对 uuu 的 dfs 即将结束时，判断 dfnu=lowudfn_u=low_udfnu​=lowu​（可得 (u,fau)(u,\mathit{fa}_u)(u,fau​) 为桥），若为真，则将 stkstkstk 退到 uuu 结束。这样的实现相当于在上文的 vvv dfs 结束时直接退栈，而不是回溯到 uuu 的 dfs 时判断、退栈。应为根节点没有父亲。
当然你也可以依然按算法流程的实现，但要加一个超级源点 000 只连接根节点，这样就能保证根节点所在边双被退栈。
代码
暂无。

完结撒花！
Tarjan 连通系列正式完结啦！（除了代码）。
以后可能还会更 LCA、LCT、splay 的文章（挖大坑）。
]]></content>
      <tags>
        <tag>Algorithms</tag>
      </tags>
  </entry>
  <entry>
    <title>Tarjan 求割点和桥</title>
    <url>/tarjan-cut/</url>
    <content><![CDATA[欢迎批评指正！
注意：本文只针对无向图。
前置芝士

割点：对于一个点 uuu，若删除 uuu 会使当前无向图中连通分量增多，我们就称 uuu 为该图的割点。
桥（割边）：同理，对于一条边 (u,v)(u,v)(u,v)，若删除 (u,v)(u,v)(u,v) 会使当前无向图中连通分量增多，我们就称 (u,v)(u,v)(u,v) 为该图的桥。
Tarjan 求强连通分量和缩点


Tarjan 求割点
设两个数组 dfn\mathit{dfn}dfn 和 low\mathit{low}low，表示 dfs 序和至多通过 111 条非树边所能到达的点的 dfn\mathit{dfn}dfn 的最小值。
注意，这里的树边是有向边，是无向边中按 dfs 序访问的那个方向。非树边包含树边的反向边。
在 dfs 过程中维护这两个数组。
当 uuu 和其儿子 vvv 满足 lowv≥dfnu\mathit{low}_v\ge \mathit{dfn}_ulowv​≥dfnu​ 时，称 uuu 是割点。
感性理解：因为这说明 vvv 无法通过非树边“逃出”uuu 的子树，只能通过 uuu，那么当 uuu 被删除时，vvv 就与其他点脱离了联系。
但有一个特例：如果 uuu 是 dfs 树的根，那么只要有两个或更多儿子，uuu 就是割点，因为删除根节点后这两个或更多子树将互不相连。
算法流程
dfs 到 uuu 时：

给 dfnu\mathit{dfn}_udfnu​、lowu\mathit{low}_ulowu​ 赋值。
遍历每个子节点 vvv：

如果未被访问过，就先 dfs，然后更新 lowu←min⁡(lowu,lowv)\mathit{low}_u\gets\min(\mathit{low}_u,\mathit{low}_v)lowu​←min(lowu​,lowv​)。
如果访问过，就更新 lowu←min⁡(lowu,dfnv)\mathit{low}_u\gets\min(\mathit{low}_u,\mathit{dfn}_v)lowu​←min(lowu​,dfnv​)。
如果你想知道为什么这样更新，请看这个。
如果满足 lowv≥dfnu\mathit{low}_v\ge \mathit{dfn}_ulowv​≥dfnu​，将 uuu 标记为割点。但要特判根节点。



代码
int n,m;vector&lt;int&gt; e[21145];// 边表bitset&lt;20008&gt; cut;// 标记是否为割点int dfn[21145],low[21145],cnt=1,root;// cnt：时间戳，root：当前 dfs 树的根void tarjan(int u=root)&#123;    int chd=0;// 孩子数量    low[u]=dfn[u]=cnt++;    for(int v:e[u])// 遍历所有孩子    &#123;        if(!dfn[v])// 若未遍历过        &#123;            tarjan(v);            low[u]=min(low[u],low[v]);// 更新 low            if(low[v]&gt;=dfn[u])// 判断是否为割点            &#123;                cut[u]=true;            &#125;            chd++;        &#125;        else        &#123;            low[u]=min(low[u],dfn[v]);        &#125;    &#125;    if(u==root)// 特判是否为根节点    &#123;        if(chd&gt;=2)        &#123;            cut[u]=true;        &#125;        else        &#123;            cut[u]=false;        &#125;    &#125;    return;&#125;
Tarjan 求桥
求桥时，需要稍微修改 low\mathit{low}low 的定义：那条非树边不得是树边的反向边（即不能从儿子走到父亲）。原因下面解释。
如果边 (u,v)(u,v)(u,v) 满足 dfnu&lt;lowv\mathit{dfn}_u&lt;\mathit{low}_vdfnu​&lt;lowv​，那么边 (u,v)(u,v)(u,v) 是桥。
证明：
如果 (u,v)(u,v)(u,v) 不是桥，那么根据桥的定义一定有另一条路径可使 vvv 到达 uuu，而这只能通过走返祖边实现，于是 dfnu≥lowv\mathit{dfn}_u\ge \mathit{low}_vdfnu​≥lowv​，与条件相悖。
同时，因为 (u,v)(u,v)(u,v) 在检查是否是桥的过程中应假设 (u,v)(u,v)(u,v) 被删除，所以 (u,v)(u,v)(u,v) 正走反走都不行，于是限定不能走树边的反向边，否则一个桥都找不到。
注意：重边不能忽略，因此在 dfs 时不能传父节点，应传父节点连过来的边。
算法流程
dfs 到 uuu 时：

给 dfnu\mathit{dfn}_udfnu​、lowu\mathit{low}_ulowu​ 赋值。
遍历每个子节点 vvv，如果 (u,v)(u,v)(u,v) 不是来时的边：

如果未被访问过，就先 dfs，然后更新 lowu←min⁡(lowu,lowv)\mathit{low}_u\gets\min(\mathit{low}_u,\mathit{low}_v)lowu​←min(lowu​,lowv​)。

如果满足 lowv&gt;dfnu\mathit{low}_v&gt;\mathit{dfn}_ulowv​&gt;dfnu​，将 (u,v)(u,v)(u,v) 标记为桥。


如果访问过，就更新 lowu←min⁡(lowu,dfnv)\mathit{low}_u\gets\min(\mathit{low}_u,\mathit{dfn}_v)lowu​←min(lowu​,dfnv​)。



代码
int n,m;vector&lt;pair&lt;int,int&gt;&gt; e[21145];// 边表，pair存，.first 是连向的点的编号，.second 是边的编号bitset&lt;200008&gt; cut;// 标记是否为桥int edgecnt=1;inline void addedge(int u,int v)&#123;    e[u].push_back(&#123;v,edgecnt&#125;);    e[v].push_back(&#123;u,edgecnt++&#125;);&#125;int dfn[21145],low[21145],cnt=1,root;// cnt：时间戳，root：当前 dfs 树的根void tarjan(int u=root,int pre=0)&#123;    low[u]=dfn[u]=cnt++;    for(pair&lt;int,int&gt; to:e[u])// 遍历所有孩子    &#123;        if(to.second==pre)        &#123;            continue;        &#125;        int v=to.first;        if(!dfn[v])// 若未遍历过        &#123;            tarjan(v,to.second);            low[u]=min(low[u],low[v]);// 更新 low            if(low[v]&gt;dfn[u])// 判断是否为桥            &#123;                cut[to.second]=true;            &#125;        &#125;        else        &#123;            low[u]=min(low[u],dfn[v]);        &#125;    &#125;    return;&#125;]]></content>
      <tags>
        <tag>Algorithms</tag>
      </tags>
  </entry>
  <entry>
    <title>Tarjan 求强连通分量和缩点</title>
    <url>/tarjan-scc/</url>
    <content><![CDATA[Upd 23.8.29\texttt{Upd 23.8.29}Upd 23.8.29 修正错别字、证明，添加代码和注释

欢迎批评指正！
注意：本文只针对有向图。

前置芝士

什么是强连通分量（SCC）？
强连通分量，一般指 有向图的极大强连通子图，在这些子图中，所有点双向可达。
dfs 序：即 dfs 过程中访问点的顺序。
dfs 生成树：由 dfs 过程中访问的边组成的边集 和 原图的点集 组成的树。
树边，非树边：属于 dfs 过程中访问的边 为树边，否则为非树边。



返祖边（反向边）：从孩子连接到祖先的边。
前向边：从祖先连接到孩子的边。
横插边：除返祖边和前向边之外的非树边。（连接没有祖孙关系的两点的边。）



某个强连通分量的根：这个强连通分量重 dfs 序最小的节点。

Tarjan 算法
设两个数组 dfn\mathit{dfn}dfn 和 low\mathit{low}low，分别表示 dfs 序和至多通过 111 条非树边所能到达的点的 dfn\mathit{dfn}dfn 的最小值。
看下面这张图：

每个节点的编号就是它的 dfn\mathit{dfn}dfn，旁边标注的数字是 low\mathit{low}low，可以自行理解一下。
另外，我们还需要一个栈 stk\mathit{stk}stk 存节点。
算法流程
Tarjan 是在 dfs 中实现的，每次访问到当前节点 uuu，就将它压入 stk\mathit{stk}stk 中。随后访问所有相邻的点 vvv。


如果没访问过，说明 (u,v)(u,v)(u,v) 是一条树边，继续 dfs。
dfs vvv 的子树结束后，更新 lowu←min⁡(lowu,lowv)\mathit{low}_u\gets\min(\mathit{low}_u,\mathit{low}_v)lowu​←min(lowu​,lowv​)。因为根据 low\mathit{low}low 的定义，走多少条树边都没关系，而 (u,v)(u,v)(u,v) 是一条树边，我们可以从 uuu 走到 vvv 后再继续往上爬。也就是说，vvv 能到的 lowv\mathit{low}_vlowv​，uuu 也能到。于是更新。


如果 vvv 已被访问过且已属于另一个 SCC，说明 (u,v)(u,v)(u,v) 是一条横插边，两个 SCC 无关，直接跳过，不予处理。


如果 vvv 被访问过且在 stk\mathit{stk}stk 内，说明 (u,v)(u,v)(u,v) 是一条返祖边，更新 lowu←min⁡(lowu,dfnv)\mathit{low}_u\gets\min(\mathit{low}_u,\mathit{dfn}_v)lowu​←min(lowu​,dfnv​)。
因为 low\mathit{low}low 的定义为仅通过 111 条非树边，故可以直接走返祖边 (u,v)(u,v)(u,v)，如果 dfnv\mathit{dfn}_vdfnv​ 比 lowu\mathit{low}_ulowu​ 小，则更新。
关于为什么不是 lowu←min⁡(lowu,lowv)\mathit{low}_u\gets\min(\mathit{low}_u,\mathit{low}_v)lowu​←min(lowu​,lowv​)，因为 lowv\mathit{low}_vlowv​ 可能已经经过了一条非树边，如果再走返祖边 (u,v)(u,v)(u,v)，就可能走了两条非树边，与 low\mathit{low}low 的定义相悖。（其实这样些也可以得到正确答案，但是求割点时就会错。）


然后判断 uuu 是否是根：若 dfnu=lowu\mathit{dfn}_u=\mathit{low}_udfnu​=lowu​，则是当前 SCC 的根，然后退栈到 uuu，保存答案。
因为 dfnu=lowu\mathit{dfn}_u=\mathit{low}_udfnu​=lowu​，所以 uuu 的子树内的所有点都不能通过返祖边到达 dfn\mathit{dfn}dfn 比 uuu 小的点（否则可以通过树边到达这些子节点，然后走返祖边。使 lowu&lt;dfnu\mathit{low}_u&lt;\mathit{dfn}_ulowu​&lt;dfnu​。）
关于为什么跳出子树至多经过 111 条非树边：如果有 222 条甚至更多，必然有走的最后一条边跳出了子树。那么跳出子树前的点必然在子树内，可以走树边到达，故至多（其实是要且只要）走 111 条非树边。


代码
int n,m;vector&lt;int&gt; e[11451],stk;// e：边表int bel[11451];// bel[i] 表示 i 属于哪个 SCC（编号）vector&lt;vector&lt;int&gt;&gt; scc=&#123;&#123;&#125;&#125;;// 存每个强连通分量的点的编号int cnt=1,dfn[11451],low[11451];// cnt：SCC数量（+1）int dfncnt=1;// 时间戳void tarjan(int u)&#123;    dfn[u]=low[u]=dfncnt++;    stk.push_back(u);    for(int v:e[u])// 范围 for，遍历邻居    &#123;        if(!dfn[v])// 未访问        &#123;            tarjan(v);            low[u]=min(low[u],low[v]);// 访问并更新        &#125;        else if(!bel[v])// in stk        &#123;            low[u]=min(low[u],dfn[v]);// 单纯更新        &#125;    &#125;    if(low[u]==dfn[u])// 是当前 SCC 的根    &#123;        int t;        scc.push_back(&#123;&#125;);        while(stk.back()!=u)// 退栈到 u        &#123;            t=stk.back();            stk.pop_back();            scc[cnt].push_back(t);// 保存            bel[t]=cnt;        &#125;        scc[cnt].push_back(u);        sort(scc[cnt].begin(),scc[cnt].end());        bel[u]=cnt++;        stk.pop_back();    &#125;&#125;
注意图可能不连通，所以主函数里要加上：
for(int i=1;i&lt;=n;i++)&#123;    if(!dfn[i])    &#123;        tarjan(i);    &#125;&#125;
每次都调用一遍 tarjan。
缩点
缩点很好理解，就是将每个强连通分量中的点的信息合并，缩成一个点，形成一个 DAG（有向无环图）。
代码
for(int i=1;i&lt;=n;i++)&#123;    newval[bel[i]]+=val[i];    for(int j:e[i])    &#123;        if(bel[i]!=bel[j])        &#123;            newe[bel[i]].push_back(bel[j]);        &#125;    &#125;&#125;
其中 e 为原图，newe 为新图，val 为原图点权（或者什么类似点权的值），newval 为新图点权。
参考

这位大佬的博客

]]></content>
      <tags>
        <tag>Algorithms</tag>
      </tags>
  </entry>
  <entry>
    <title>测试自定义路径</title>
    <url>/testpath/</url>
    <content><![CDATA[测试自定义路径。路径名：testpath。
]]></content>
      <tags>
        <tag>Test</tag>
      </tags>
  </entry>
  <entry>
    <title>单击此处添加标题</title>
    <url>/untitled/</url>
    <content><![CDATA[
  
  
    
      
      
        Hey, password is required here.
      
    
  

]]></content>
  </entry>
  <entry>
    <title>测试</title>
    <url>/%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[测试中文 Chinese。

H1
H2
H3
H4
H5
H6
粗体 Bold
斜体 Italic

a
b
c


a
b
c

eiπ+1=0e^{\mathrm{i}\pi}+1=0eiπ+1=0
ans=114514=1919810\begin{aligned}
	ans&amp;=114514\\
	&amp;=1919810
\end{aligned}
ans​=114514=1919810​
ωn±1=cos⁡(2πn)±sin⁡(2πn)i(2,8)\omega_n^{\pm 1}=\cos\left(\cfrac{2\pi}{n}\right)\pm\sin\left(\cfrac{2\pi}{n}\right)\text{i}\tag{2,8}
ωn±1​=cos(n2π​)±sin(n2π​)i(2,8)
F(x)=Fl(x2)+xFr(x2)(3)F(x)=F_l\left(x^2\right)+xF_r\left(x^2\right)\tag{3}
F(x)=Fl​(x2)+xFr​(x2)(3)
F(ωnk)=Fl(ωn/2k)+ωnkFr(ωn/2k)F(ωnn/2+k)=Fl(ωn/2k)−ωnkFr(ωn/2k)(4,5)\begin{aligned}
F\left(\omega_n^k\right)&amp;=F_l\left(\omega_{n/2}^k\right)+\omega_n^k F_r\left(\omega_{n/2}^k\right)
\\
F\left(\omega_n^{n/2+k}\right)&amp;=F_l\left(\omega_{n/2}^k\right)-\omega_n^k F_r\left(\omega_{n/2}^k\right)
\end{aligned}\tag{4,5}
F(ωnk​)F(ωnn/2+k​)​=Fl​(ωn/2k​)+ωnk​Fr​(ωn/2k​)=Fl​(ωn/2k​)−ωnk​Fr​(ωn/2k​)​(4,5)
Yj=F(ωnj)=∑k=0n−1(ωnj)k×F[k](6)Y_j=F\left(\omega_n^j\right)=\sum_{k=0}^{n-1}\left(\omega_n^j\right)^k\times F[k]\tag{6}
Yj​=F(ωnj​)=k=0∑n−1​(ωnj​)k×F[k](6)
F[i]=1n∑j=0n−1(ωn−i)j×Yj(7)F[i]=\cfrac{1}{n}\sum_{j=0}^{n-1}\left(\omega_n^{-i}\right)^j\times Y_j\tag{7}
F[i]=n1​j=0∑n−1​(ωn−i​)j×Yj​(7)

#include &lt;iostream&gt;int main()&#123;    printf(&quot;Hello World&quot;);    return 0;&#125;
code
sout
洛谷



点击查看神秘数字
114514


[x] 114514
[ ] 1919810


[!NOTE]
Useful information that users should know, even when skimming content.


[!TIP]
Helpful advice for doing things better or more easily.


[!IMPORTANT]
Key information users need to know to achieve their goal.


[!WARNING]
Urgent info that needs immediate user attention to avoid problems.


[!CAUTION]
Advises about risks or negative outcomes of certain actions.

There is a comment below.

There is a comment above.
Here is a simple flow chart:
graph TD;    A--&gt;B;    A--&gt;C;    B--&gt;D;    C--&gt;D;]]></content>
      <tags>
        <tag>Test</tag>
      </tags>
  </entry>
</search>
